// Code generated by Prisma (prisma@1.32.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  personnelDocuments: (
    where?: PersonnelDocumentsWhereInput
  ) => Promise<boolean>;
  personnelInterview: (
    where?: PersonnelInterviewWhereInput
  ) => Promise<boolean>;
  personnelMeta: (where?: PersonnelMetaWhereInput) => Promise<boolean>;
  personnelPhotos: (where?: PersonnelPhotosWhereInput) => Promise<boolean>;
  personnelReferences: (
    where?: PersonnelReferencesWhereInput
  ) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  personnelDocuments: (
    where: PersonnelDocumentsWhereUniqueInput
  ) => PersonnelDocumentsNullablePromise;
  personnelDocumentses: (args?: {
    where?: PersonnelDocumentsWhereInput;
    orderBy?: PersonnelDocumentsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PersonnelDocuments>;
  personnelDocumentsesConnection: (args?: {
    where?: PersonnelDocumentsWhereInput;
    orderBy?: PersonnelDocumentsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PersonnelDocumentsConnectionPromise;
  personnelInterview: (
    where: PersonnelInterviewWhereUniqueInput
  ) => PersonnelInterviewNullablePromise;
  personnelInterviews: (args?: {
    where?: PersonnelInterviewWhereInput;
    orderBy?: PersonnelInterviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PersonnelInterview>;
  personnelInterviewsConnection: (args?: {
    where?: PersonnelInterviewWhereInput;
    orderBy?: PersonnelInterviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PersonnelInterviewConnectionPromise;
  personnelMeta: (
    where: PersonnelMetaWhereUniqueInput
  ) => PersonnelMetaNullablePromise;
  personnelMetas: (args?: {
    where?: PersonnelMetaWhereInput;
    orderBy?: PersonnelMetaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PersonnelMeta>;
  personnelMetasConnection: (args?: {
    where?: PersonnelMetaWhereInput;
    orderBy?: PersonnelMetaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PersonnelMetaConnectionPromise;
  personnelPhotos: (
    where: PersonnelPhotosWhereUniqueInput
  ) => PersonnelPhotosNullablePromise;
  personnelPhotoses: (args?: {
    where?: PersonnelPhotosWhereInput;
    orderBy?: PersonnelPhotosOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PersonnelPhotos>;
  personnelPhotosesConnection: (args?: {
    where?: PersonnelPhotosWhereInput;
    orderBy?: PersonnelPhotosOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PersonnelPhotosConnectionPromise;
  personnelReferences: (
    where: PersonnelReferencesWhereUniqueInput
  ) => PersonnelReferencesNullablePromise;
  personnelReferenceses: (args?: {
    where?: PersonnelReferencesWhereInput;
    orderBy?: PersonnelReferencesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PersonnelReferences>;
  personnelReferencesesConnection: (args?: {
    where?: PersonnelReferencesWhereInput;
    orderBy?: PersonnelReferencesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PersonnelReferencesConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createPersonnelDocuments: (
    data: PersonnelDocumentsCreateInput
  ) => PersonnelDocumentsPromise;
  updatePersonnelDocuments: (args: {
    data: PersonnelDocumentsUpdateInput;
    where: PersonnelDocumentsWhereUniqueInput;
  }) => PersonnelDocumentsPromise;
  updateManyPersonnelDocumentses: (args: {
    data: PersonnelDocumentsUpdateManyMutationInput;
    where?: PersonnelDocumentsWhereInput;
  }) => BatchPayloadPromise;
  upsertPersonnelDocuments: (args: {
    where: PersonnelDocumentsWhereUniqueInput;
    create: PersonnelDocumentsCreateInput;
    update: PersonnelDocumentsUpdateInput;
  }) => PersonnelDocumentsPromise;
  deletePersonnelDocuments: (
    where: PersonnelDocumentsWhereUniqueInput
  ) => PersonnelDocumentsPromise;
  deleteManyPersonnelDocumentses: (
    where?: PersonnelDocumentsWhereInput
  ) => BatchPayloadPromise;
  createPersonnelInterview: (
    data: PersonnelInterviewCreateInput
  ) => PersonnelInterviewPromise;
  updatePersonnelInterview: (args: {
    data: PersonnelInterviewUpdateInput;
    where: PersonnelInterviewWhereUniqueInput;
  }) => PersonnelInterviewPromise;
  updateManyPersonnelInterviews: (args: {
    data: PersonnelInterviewUpdateManyMutationInput;
    where?: PersonnelInterviewWhereInput;
  }) => BatchPayloadPromise;
  upsertPersonnelInterview: (args: {
    where: PersonnelInterviewWhereUniqueInput;
    create: PersonnelInterviewCreateInput;
    update: PersonnelInterviewUpdateInput;
  }) => PersonnelInterviewPromise;
  deletePersonnelInterview: (
    where: PersonnelInterviewWhereUniqueInput
  ) => PersonnelInterviewPromise;
  deleteManyPersonnelInterviews: (
    where?: PersonnelInterviewWhereInput
  ) => BatchPayloadPromise;
  createPersonnelMeta: (data: PersonnelMetaCreateInput) => PersonnelMetaPromise;
  updatePersonnelMeta: (args: {
    data: PersonnelMetaUpdateInput;
    where: PersonnelMetaWhereUniqueInput;
  }) => PersonnelMetaPromise;
  updateManyPersonnelMetas: (args: {
    data: PersonnelMetaUpdateManyMutationInput;
    where?: PersonnelMetaWhereInput;
  }) => BatchPayloadPromise;
  upsertPersonnelMeta: (args: {
    where: PersonnelMetaWhereUniqueInput;
    create: PersonnelMetaCreateInput;
    update: PersonnelMetaUpdateInput;
  }) => PersonnelMetaPromise;
  deletePersonnelMeta: (
    where: PersonnelMetaWhereUniqueInput
  ) => PersonnelMetaPromise;
  deleteManyPersonnelMetas: (
    where?: PersonnelMetaWhereInput
  ) => BatchPayloadPromise;
  createPersonnelPhotos: (
    data: PersonnelPhotosCreateInput
  ) => PersonnelPhotosPromise;
  updatePersonnelPhotos: (args: {
    data: PersonnelPhotosUpdateInput;
    where: PersonnelPhotosWhereUniqueInput;
  }) => PersonnelPhotosPromise;
  updateManyPersonnelPhotoses: (args: {
    data: PersonnelPhotosUpdateManyMutationInput;
    where?: PersonnelPhotosWhereInput;
  }) => BatchPayloadPromise;
  upsertPersonnelPhotos: (args: {
    where: PersonnelPhotosWhereUniqueInput;
    create: PersonnelPhotosCreateInput;
    update: PersonnelPhotosUpdateInput;
  }) => PersonnelPhotosPromise;
  deletePersonnelPhotos: (
    where: PersonnelPhotosWhereUniqueInput
  ) => PersonnelPhotosPromise;
  deleteManyPersonnelPhotoses: (
    where?: PersonnelPhotosWhereInput
  ) => BatchPayloadPromise;
  createPersonnelReferences: (
    data: PersonnelReferencesCreateInput
  ) => PersonnelReferencesPromise;
  updatePersonnelReferences: (args: {
    data: PersonnelReferencesUpdateInput;
    where: PersonnelReferencesWhereUniqueInput;
  }) => PersonnelReferencesPromise;
  updateManyPersonnelReferenceses: (args: {
    data: PersonnelReferencesUpdateManyMutationInput;
    where?: PersonnelReferencesWhereInput;
  }) => BatchPayloadPromise;
  upsertPersonnelReferences: (args: {
    where: PersonnelReferencesWhereUniqueInput;
    create: PersonnelReferencesCreateInput;
    update: PersonnelReferencesUpdateInput;
  }) => PersonnelReferencesPromise;
  deletePersonnelReferences: (
    where: PersonnelReferencesWhereUniqueInput
  ) => PersonnelReferencesPromise;
  deleteManyPersonnelReferenceses: (
    where?: PersonnelReferencesWhereInput
  ) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  personnelDocuments: (
    where?: PersonnelDocumentsSubscriptionWhereInput
  ) => PersonnelDocumentsSubscriptionPayloadSubscription;
  personnelInterview: (
    where?: PersonnelInterviewSubscriptionWhereInput
  ) => PersonnelInterviewSubscriptionPayloadSubscription;
  personnelMeta: (
    where?: PersonnelMetaSubscriptionWhereInput
  ) => PersonnelMetaSubscriptionPayloadSubscription;
  personnelPhotos: (
    where?: PersonnelPhotosSubscriptionWhereInput
  ) => PersonnelPhotosSubscriptionPayloadSubscription;
  personnelReferences: (
    where?: PersonnelReferencesSubscriptionWhereInput
  ) => PersonnelReferencesSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "is_deleted_ASC"
  | "is_deleted_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PersonnelDocumentTypes =
  | "GUARD_CARD"
  | "BATON_PERMIT"
  | "CPR_CERTIFICATE"
  | "RESUME"
  | "EXPOSED_FIREARM_PERMIT"
  | "CCW_PERMIT"
  | "POST_CERTIFICATION"
  | "DD214"
  | "OTHERS";

export type PersonnelDocumentsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "doc_name_ASC"
  | "doc_name_DESC"
  | "doc_type_ASC"
  | "doc_type_DESC"
  | "filename_ASC"
  | "filename_DESC"
  | "mimetype_ASC"
  | "mimetype_DESC"
  | "encoding_ASC"
  | "encoding_DESC"
  | "url_ASC"
  | "url_DESC"
  | "is_verified_ASC"
  | "is_verified_DESC"
  | "expiry_date_ASC"
  | "expiry_date_DESC"
  | "is_deleted_ASC"
  | "is_deleted_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserType = "ADMIN" | "CLIENT" | "PERSONNEL";

export type PersonnelInterviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "interviewed_date_ASC"
  | "interviewed_date_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PersonnelPhotosOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "filename_ASC"
  | "filename_DESC"
  | "mimetype_ASC"
  | "mimetype_DESC"
  | "encoding_ASC"
  | "encoding_DESC"
  | "url_ASC"
  | "url_DESC"
  | "is_primary_ASC"
  | "is_primary_DESC"
  | "is_deleted_ASC"
  | "is_deleted_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PersonnelReferencesOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PersonnelMetaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "driving_licence_id_ASC"
  | "driving_licence_id_DESC"
  | "biograhpy_ASC"
  | "biograhpy_DESC"
  | "experience_ASC"
  | "experience_DESC"
  | "certification_ASC"
  | "certification_DESC"
  | "social_security_number_ASC"
  | "social_security_number_DESC"
  | "is_verified_ASC"
  | "is_verified_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "published_ASC"
  | "published_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "address_ASC"
  | "address_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "zip_ASC"
  | "zip_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "company_ASC"
  | "company_DESC"
  | "date_of_birth_ASC"
  | "date_of_birth_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  is_deleted?: Maybe<Boolean>;
  is_deleted_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export type PersonnelDocumentsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PersonnelDocumentsWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  doc_name?: Maybe<String>;
  doc_name_not?: Maybe<String>;
  doc_name_in?: Maybe<String[] | String>;
  doc_name_not_in?: Maybe<String[] | String>;
  doc_name_lt?: Maybe<String>;
  doc_name_lte?: Maybe<String>;
  doc_name_gt?: Maybe<String>;
  doc_name_gte?: Maybe<String>;
  doc_name_contains?: Maybe<String>;
  doc_name_not_contains?: Maybe<String>;
  doc_name_starts_with?: Maybe<String>;
  doc_name_not_starts_with?: Maybe<String>;
  doc_name_ends_with?: Maybe<String>;
  doc_name_not_ends_with?: Maybe<String>;
  doc_type?: Maybe<PersonnelDocumentTypes>;
  doc_type_not?: Maybe<PersonnelDocumentTypes>;
  doc_type_in?: Maybe<PersonnelDocumentTypes[] | PersonnelDocumentTypes>;
  doc_type_not_in?: Maybe<PersonnelDocumentTypes[] | PersonnelDocumentTypes>;
  filename?: Maybe<String>;
  filename_not?: Maybe<String>;
  filename_in?: Maybe<String[] | String>;
  filename_not_in?: Maybe<String[] | String>;
  filename_lt?: Maybe<String>;
  filename_lte?: Maybe<String>;
  filename_gt?: Maybe<String>;
  filename_gte?: Maybe<String>;
  filename_contains?: Maybe<String>;
  filename_not_contains?: Maybe<String>;
  filename_starts_with?: Maybe<String>;
  filename_not_starts_with?: Maybe<String>;
  filename_ends_with?: Maybe<String>;
  filename_not_ends_with?: Maybe<String>;
  mimetype?: Maybe<String>;
  mimetype_not?: Maybe<String>;
  mimetype_in?: Maybe<String[] | String>;
  mimetype_not_in?: Maybe<String[] | String>;
  mimetype_lt?: Maybe<String>;
  mimetype_lte?: Maybe<String>;
  mimetype_gt?: Maybe<String>;
  mimetype_gte?: Maybe<String>;
  mimetype_contains?: Maybe<String>;
  mimetype_not_contains?: Maybe<String>;
  mimetype_starts_with?: Maybe<String>;
  mimetype_not_starts_with?: Maybe<String>;
  mimetype_ends_with?: Maybe<String>;
  mimetype_not_ends_with?: Maybe<String>;
  encoding?: Maybe<String>;
  encoding_not?: Maybe<String>;
  encoding_in?: Maybe<String[] | String>;
  encoding_not_in?: Maybe<String[] | String>;
  encoding_lt?: Maybe<String>;
  encoding_lte?: Maybe<String>;
  encoding_gt?: Maybe<String>;
  encoding_gte?: Maybe<String>;
  encoding_contains?: Maybe<String>;
  encoding_not_contains?: Maybe<String>;
  encoding_starts_with?: Maybe<String>;
  encoding_not_starts_with?: Maybe<String>;
  encoding_ends_with?: Maybe<String>;
  encoding_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  is_verified_not?: Maybe<Boolean>;
  expiry_date?: Maybe<DateTimeInput>;
  expiry_date_not?: Maybe<DateTimeInput>;
  expiry_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiry_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiry_date_lt?: Maybe<DateTimeInput>;
  expiry_date_lte?: Maybe<DateTimeInput>;
  expiry_date_gt?: Maybe<DateTimeInput>;
  expiry_date_gte?: Maybe<DateTimeInput>;
  is_deleted?: Maybe<Boolean>;
  is_deleted_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PersonnelDocumentsWhereInput[] | PersonnelDocumentsWhereInput>;
  OR?: Maybe<PersonnelDocumentsWhereInput[] | PersonnelDocumentsWhereInput>;
  NOT?: Maybe<PersonnelDocumentsWhereInput[] | PersonnelDocumentsWhereInput>;
}

export type PersonnelInterviewWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PersonnelInterviewWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  interviewed_by?: Maybe<UserWhereInput>;
  interviewed_date?: Maybe<DateTimeInput>;
  interviewed_date_not?: Maybe<DateTimeInput>;
  interviewed_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  interviewed_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  interviewed_date_lt?: Maybe<DateTimeInput>;
  interviewed_date_lte?: Maybe<DateTimeInput>;
  interviewed_date_gt?: Maybe<DateTimeInput>;
  interviewed_date_gte?: Maybe<DateTimeInput>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PersonnelInterviewWhereInput[] | PersonnelInterviewWhereInput>;
  OR?: Maybe<PersonnelInterviewWhereInput[] | PersonnelInterviewWhereInput>;
  NOT?: Maybe<PersonnelInterviewWhereInput[] | PersonnelInterviewWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  zip?: Maybe<String>;
  zip_not?: Maybe<String>;
  zip_in?: Maybe<String[] | String>;
  zip_not_in?: Maybe<String[] | String>;
  zip_lt?: Maybe<String>;
  zip_lte?: Maybe<String>;
  zip_gt?: Maybe<String>;
  zip_gte?: Maybe<String>;
  zip_contains?: Maybe<String>;
  zip_not_contains?: Maybe<String>;
  zip_starts_with?: Maybe<String>;
  zip_not_starts_with?: Maybe<String>;
  zip_ends_with?: Maybe<String>;
  zip_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  company?: Maybe<String>;
  company_not?: Maybe<String>;
  company_in?: Maybe<String[] | String>;
  company_not_in?: Maybe<String[] | String>;
  company_lt?: Maybe<String>;
  company_lte?: Maybe<String>;
  company_gt?: Maybe<String>;
  company_gte?: Maybe<String>;
  company_contains?: Maybe<String>;
  company_not_contains?: Maybe<String>;
  company_starts_with?: Maybe<String>;
  company_not_starts_with?: Maybe<String>;
  company_ends_with?: Maybe<String>;
  company_not_ends_with?: Maybe<String>;
  date_of_birth?: Maybe<DateTimeInput>;
  date_of_birth_not?: Maybe<DateTimeInput>;
  date_of_birth_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_of_birth_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_of_birth_lt?: Maybe<DateTimeInput>;
  date_of_birth_lte?: Maybe<DateTimeInput>;
  date_of_birth_gt?: Maybe<DateTimeInput>;
  date_of_birth_gte?: Maybe<DateTimeInput>;
  type?: Maybe<UserType>;
  type_not?: Maybe<UserType>;
  type_in?: Maybe<UserType[] | UserType>;
  type_not_in?: Maybe<UserType[] | UserType>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type PersonnelMetaWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PersonnelPhotosWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  filename?: Maybe<String>;
  filename_not?: Maybe<String>;
  filename_in?: Maybe<String[] | String>;
  filename_not_in?: Maybe<String[] | String>;
  filename_lt?: Maybe<String>;
  filename_lte?: Maybe<String>;
  filename_gt?: Maybe<String>;
  filename_gte?: Maybe<String>;
  filename_contains?: Maybe<String>;
  filename_not_contains?: Maybe<String>;
  filename_starts_with?: Maybe<String>;
  filename_not_starts_with?: Maybe<String>;
  filename_ends_with?: Maybe<String>;
  filename_not_ends_with?: Maybe<String>;
  mimetype?: Maybe<String>;
  mimetype_not?: Maybe<String>;
  mimetype_in?: Maybe<String[] | String>;
  mimetype_not_in?: Maybe<String[] | String>;
  mimetype_lt?: Maybe<String>;
  mimetype_lte?: Maybe<String>;
  mimetype_gt?: Maybe<String>;
  mimetype_gte?: Maybe<String>;
  mimetype_contains?: Maybe<String>;
  mimetype_not_contains?: Maybe<String>;
  mimetype_starts_with?: Maybe<String>;
  mimetype_not_starts_with?: Maybe<String>;
  mimetype_ends_with?: Maybe<String>;
  mimetype_not_ends_with?: Maybe<String>;
  encoding?: Maybe<String>;
  encoding_not?: Maybe<String>;
  encoding_in?: Maybe<String[] | String>;
  encoding_not_in?: Maybe<String[] | String>;
  encoding_lt?: Maybe<String>;
  encoding_lte?: Maybe<String>;
  encoding_gt?: Maybe<String>;
  encoding_gte?: Maybe<String>;
  encoding_contains?: Maybe<String>;
  encoding_not_contains?: Maybe<String>;
  encoding_starts_with?: Maybe<String>;
  encoding_not_starts_with?: Maybe<String>;
  encoding_ends_with?: Maybe<String>;
  encoding_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  is_primary?: Maybe<Boolean>;
  is_primary_not?: Maybe<Boolean>;
  is_deleted?: Maybe<Boolean>;
  is_deleted_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PersonnelPhotosWhereInput[] | PersonnelPhotosWhereInput>;
  OR?: Maybe<PersonnelPhotosWhereInput[] | PersonnelPhotosWhereInput>;
  NOT?: Maybe<PersonnelPhotosWhereInput[] | PersonnelPhotosWhereInput>;
}

export interface PersonnelReferencesWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PersonnelReferencesWhereInput[] | PersonnelReferencesWhereInput>;
  OR?: Maybe<PersonnelReferencesWhereInput[] | PersonnelReferencesWhereInput>;
  NOT?: Maybe<PersonnelReferencesWhereInput[] | PersonnelReferencesWhereInput>;
}

export interface PersonnelMetaWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  driving_licence_id?: Maybe<String>;
  driving_licence_id_not?: Maybe<String>;
  driving_licence_id_in?: Maybe<String[] | String>;
  driving_licence_id_not_in?: Maybe<String[] | String>;
  driving_licence_id_lt?: Maybe<String>;
  driving_licence_id_lte?: Maybe<String>;
  driving_licence_id_gt?: Maybe<String>;
  driving_licence_id_gte?: Maybe<String>;
  driving_licence_id_contains?: Maybe<String>;
  driving_licence_id_not_contains?: Maybe<String>;
  driving_licence_id_starts_with?: Maybe<String>;
  driving_licence_id_not_starts_with?: Maybe<String>;
  driving_licence_id_ends_with?: Maybe<String>;
  driving_licence_id_not_ends_with?: Maybe<String>;
  biograhpy?: Maybe<String>;
  biograhpy_not?: Maybe<String>;
  biograhpy_in?: Maybe<String[] | String>;
  biograhpy_not_in?: Maybe<String[] | String>;
  biograhpy_lt?: Maybe<String>;
  biograhpy_lte?: Maybe<String>;
  biograhpy_gt?: Maybe<String>;
  biograhpy_gte?: Maybe<String>;
  biograhpy_contains?: Maybe<String>;
  biograhpy_not_contains?: Maybe<String>;
  biograhpy_starts_with?: Maybe<String>;
  biograhpy_not_starts_with?: Maybe<String>;
  biograhpy_ends_with?: Maybe<String>;
  biograhpy_not_ends_with?: Maybe<String>;
  experience?: Maybe<String>;
  experience_not?: Maybe<String>;
  experience_in?: Maybe<String[] | String>;
  experience_not_in?: Maybe<String[] | String>;
  experience_lt?: Maybe<String>;
  experience_lte?: Maybe<String>;
  experience_gt?: Maybe<String>;
  experience_gte?: Maybe<String>;
  experience_contains?: Maybe<String>;
  experience_not_contains?: Maybe<String>;
  experience_starts_with?: Maybe<String>;
  experience_not_starts_with?: Maybe<String>;
  experience_ends_with?: Maybe<String>;
  experience_not_ends_with?: Maybe<String>;
  certification?: Maybe<String>;
  certification_not?: Maybe<String>;
  certification_in?: Maybe<String[] | String>;
  certification_not_in?: Maybe<String[] | String>;
  certification_lt?: Maybe<String>;
  certification_lte?: Maybe<String>;
  certification_gt?: Maybe<String>;
  certification_gte?: Maybe<String>;
  certification_contains?: Maybe<String>;
  certification_not_contains?: Maybe<String>;
  certification_starts_with?: Maybe<String>;
  certification_not_starts_with?: Maybe<String>;
  certification_ends_with?: Maybe<String>;
  certification_not_ends_with?: Maybe<String>;
  social_security_number?: Maybe<String>;
  social_security_number_not?: Maybe<String>;
  social_security_number_in?: Maybe<String[] | String>;
  social_security_number_not_in?: Maybe<String[] | String>;
  social_security_number_lt?: Maybe<String>;
  social_security_number_lte?: Maybe<String>;
  social_security_number_gt?: Maybe<String>;
  social_security_number_gte?: Maybe<String>;
  social_security_number_contains?: Maybe<String>;
  social_security_number_not_contains?: Maybe<String>;
  social_security_number_starts_with?: Maybe<String>;
  social_security_number_not_starts_with?: Maybe<String>;
  social_security_number_ends_with?: Maybe<String>;
  social_security_number_not_ends_with?: Maybe<String>;
  documents_every?: Maybe<PersonnelDocumentsWhereInput>;
  documents_some?: Maybe<PersonnelDocumentsWhereInput>;
  documents_none?: Maybe<PersonnelDocumentsWhereInput>;
  photos_every?: Maybe<PersonnelPhotosWhereInput>;
  photos_some?: Maybe<PersonnelPhotosWhereInput>;
  photos_none?: Maybe<PersonnelPhotosWhereInput>;
  references_every?: Maybe<PersonnelReferencesWhereInput>;
  references_some?: Maybe<PersonnelReferencesWhereInput>;
  references_none?: Maybe<PersonnelReferencesWhereInput>;
  interviews_every?: Maybe<PersonnelInterviewWhereInput>;
  interviews_some?: Maybe<PersonnelInterviewWhereInput>;
  interviews_none?: Maybe<PersonnelInterviewWhereInput>;
  is_verified?: Maybe<Boolean>;
  is_verified_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PersonnelMetaWhereInput[] | PersonnelMetaWhereInput>;
  OR?: Maybe<PersonnelMetaWhereInput[] | PersonnelMetaWhereInput>;
  NOT?: Maybe<PersonnelMetaWhereInput[] | PersonnelMetaWhereInput>;
}

export type PersonnelPhotosWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PersonnelReferencesWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  content?: Maybe<String>;
  is_deleted?: Maybe<Boolean>;
}

export interface CommentUpdateInput {
  content?: Maybe<String>;
  is_deleted?: Maybe<Boolean>;
}

export interface CommentUpdateManyMutationInput {
  content?: Maybe<String>;
  is_deleted?: Maybe<Boolean>;
}

export interface PersonnelDocumentsCreateInput {
  id?: Maybe<ID_Input>;
  doc_name: String;
  doc_type: PersonnelDocumentTypes;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
  is_verified?: Maybe<Boolean>;
  expiry_date?: Maybe<DateTimeInput>;
  is_deleted?: Maybe<Boolean>;
}

export interface PersonnelDocumentsUpdateInput {
  doc_name?: Maybe<String>;
  doc_type?: Maybe<PersonnelDocumentTypes>;
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  expiry_date?: Maybe<DateTimeInput>;
  is_deleted?: Maybe<Boolean>;
}

export interface PersonnelDocumentsUpdateManyMutationInput {
  doc_name?: Maybe<String>;
  doc_type?: Maybe<PersonnelDocumentTypes>;
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  expiry_date?: Maybe<DateTimeInput>;
  is_deleted?: Maybe<Boolean>;
}

export interface PersonnelInterviewCreateInput {
  id?: Maybe<ID_Input>;
  interviewed_by: UserCreateOneInput;
  interviewed_date: DateTimeInput;
  status: String;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  phone?: Maybe<String>;
  company?: Maybe<String>;
  date_of_birth?: Maybe<DateTimeInput>;
  type?: Maybe<UserType>;
}

export interface PersonnelInterviewUpdateInput {
  interviewed_by?: Maybe<UserUpdateOneRequiredInput>;
  interviewed_date?: Maybe<DateTimeInput>;
  status?: Maybe<String>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  phone?: Maybe<String>;
  company?: Maybe<String>;
  date_of_birth?: Maybe<DateTimeInput>;
  type?: Maybe<UserType>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface PersonnelInterviewUpdateManyMutationInput {
  interviewed_date?: Maybe<DateTimeInput>;
  status?: Maybe<String>;
}

export interface PersonnelMetaCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  driving_licence_id?: Maybe<String>;
  biograhpy?: Maybe<String>;
  experience?: Maybe<String>;
  certification?: Maybe<String>;
  social_security_number?: Maybe<String>;
  documents?: Maybe<PersonnelDocumentsCreateManyInput>;
  photos?: Maybe<PersonnelPhotosCreateManyInput>;
  references?: Maybe<PersonnelReferencesCreateManyInput>;
  interviews?: Maybe<PersonnelInterviewCreateManyInput>;
  is_verified?: Maybe<Boolean>;
}

export interface PersonnelDocumentsCreateManyInput {
  create?: Maybe<
    PersonnelDocumentsCreateInput[] | PersonnelDocumentsCreateInput
  >;
  connect?: Maybe<
    PersonnelDocumentsWhereUniqueInput[] | PersonnelDocumentsWhereUniqueInput
  >;
}

export interface PersonnelPhotosCreateManyInput {
  create?: Maybe<PersonnelPhotosCreateInput[] | PersonnelPhotosCreateInput>;
  connect?: Maybe<
    PersonnelPhotosWhereUniqueInput[] | PersonnelPhotosWhereUniqueInput
  >;
}

export interface PersonnelPhotosCreateInput {
  id?: Maybe<ID_Input>;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
  is_primary?: Maybe<Boolean>;
  is_deleted?: Maybe<Boolean>;
}

export interface PersonnelReferencesCreateManyInput {
  create?: Maybe<
    PersonnelReferencesCreateInput[] | PersonnelReferencesCreateInput
  >;
  connect?: Maybe<
    PersonnelReferencesWhereUniqueInput[] | PersonnelReferencesWhereUniqueInput
  >;
}

export interface PersonnelReferencesCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  name: String;
  phone: String;
}

export interface PersonnelInterviewCreateManyInput {
  create?: Maybe<
    PersonnelInterviewCreateInput[] | PersonnelInterviewCreateInput
  >;
  connect?: Maybe<
    PersonnelInterviewWhereUniqueInput[] | PersonnelInterviewWhereUniqueInput
  >;
}

export interface PersonnelMetaUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  driving_licence_id?: Maybe<String>;
  biograhpy?: Maybe<String>;
  experience?: Maybe<String>;
  certification?: Maybe<String>;
  social_security_number?: Maybe<String>;
  documents?: Maybe<PersonnelDocumentsUpdateManyInput>;
  photos?: Maybe<PersonnelPhotosUpdateManyInput>;
  references?: Maybe<PersonnelReferencesUpdateManyInput>;
  interviews?: Maybe<PersonnelInterviewUpdateManyInput>;
  is_verified?: Maybe<Boolean>;
}

export interface PersonnelDocumentsUpdateManyInput {
  create?: Maybe<
    PersonnelDocumentsCreateInput[] | PersonnelDocumentsCreateInput
  >;
  update?: Maybe<
    | PersonnelDocumentsUpdateWithWhereUniqueNestedInput[]
    | PersonnelDocumentsUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | PersonnelDocumentsUpsertWithWhereUniqueNestedInput[]
    | PersonnelDocumentsUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    PersonnelDocumentsWhereUniqueInput[] | PersonnelDocumentsWhereUniqueInput
  >;
  connect?: Maybe<
    PersonnelDocumentsWhereUniqueInput[] | PersonnelDocumentsWhereUniqueInput
  >;
  set?: Maybe<
    PersonnelDocumentsWhereUniqueInput[] | PersonnelDocumentsWhereUniqueInput
  >;
  disconnect?: Maybe<
    PersonnelDocumentsWhereUniqueInput[] | PersonnelDocumentsWhereUniqueInput
  >;
  deleteMany?: Maybe<
    PersonnelDocumentsScalarWhereInput[] | PersonnelDocumentsScalarWhereInput
  >;
  updateMany?: Maybe<
    | PersonnelDocumentsUpdateManyWithWhereNestedInput[]
    | PersonnelDocumentsUpdateManyWithWhereNestedInput
  >;
}

export interface PersonnelDocumentsUpdateWithWhereUniqueNestedInput {
  where: PersonnelDocumentsWhereUniqueInput;
  data: PersonnelDocumentsUpdateDataInput;
}

export interface PersonnelDocumentsUpdateDataInput {
  doc_name?: Maybe<String>;
  doc_type?: Maybe<PersonnelDocumentTypes>;
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  expiry_date?: Maybe<DateTimeInput>;
  is_deleted?: Maybe<Boolean>;
}

export interface PersonnelDocumentsUpsertWithWhereUniqueNestedInput {
  where: PersonnelDocumentsWhereUniqueInput;
  update: PersonnelDocumentsUpdateDataInput;
  create: PersonnelDocumentsCreateInput;
}

export interface PersonnelDocumentsScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  doc_name?: Maybe<String>;
  doc_name_not?: Maybe<String>;
  doc_name_in?: Maybe<String[] | String>;
  doc_name_not_in?: Maybe<String[] | String>;
  doc_name_lt?: Maybe<String>;
  doc_name_lte?: Maybe<String>;
  doc_name_gt?: Maybe<String>;
  doc_name_gte?: Maybe<String>;
  doc_name_contains?: Maybe<String>;
  doc_name_not_contains?: Maybe<String>;
  doc_name_starts_with?: Maybe<String>;
  doc_name_not_starts_with?: Maybe<String>;
  doc_name_ends_with?: Maybe<String>;
  doc_name_not_ends_with?: Maybe<String>;
  doc_type?: Maybe<PersonnelDocumentTypes>;
  doc_type_not?: Maybe<PersonnelDocumentTypes>;
  doc_type_in?: Maybe<PersonnelDocumentTypes[] | PersonnelDocumentTypes>;
  doc_type_not_in?: Maybe<PersonnelDocumentTypes[] | PersonnelDocumentTypes>;
  filename?: Maybe<String>;
  filename_not?: Maybe<String>;
  filename_in?: Maybe<String[] | String>;
  filename_not_in?: Maybe<String[] | String>;
  filename_lt?: Maybe<String>;
  filename_lte?: Maybe<String>;
  filename_gt?: Maybe<String>;
  filename_gte?: Maybe<String>;
  filename_contains?: Maybe<String>;
  filename_not_contains?: Maybe<String>;
  filename_starts_with?: Maybe<String>;
  filename_not_starts_with?: Maybe<String>;
  filename_ends_with?: Maybe<String>;
  filename_not_ends_with?: Maybe<String>;
  mimetype?: Maybe<String>;
  mimetype_not?: Maybe<String>;
  mimetype_in?: Maybe<String[] | String>;
  mimetype_not_in?: Maybe<String[] | String>;
  mimetype_lt?: Maybe<String>;
  mimetype_lte?: Maybe<String>;
  mimetype_gt?: Maybe<String>;
  mimetype_gte?: Maybe<String>;
  mimetype_contains?: Maybe<String>;
  mimetype_not_contains?: Maybe<String>;
  mimetype_starts_with?: Maybe<String>;
  mimetype_not_starts_with?: Maybe<String>;
  mimetype_ends_with?: Maybe<String>;
  mimetype_not_ends_with?: Maybe<String>;
  encoding?: Maybe<String>;
  encoding_not?: Maybe<String>;
  encoding_in?: Maybe<String[] | String>;
  encoding_not_in?: Maybe<String[] | String>;
  encoding_lt?: Maybe<String>;
  encoding_lte?: Maybe<String>;
  encoding_gt?: Maybe<String>;
  encoding_gte?: Maybe<String>;
  encoding_contains?: Maybe<String>;
  encoding_not_contains?: Maybe<String>;
  encoding_starts_with?: Maybe<String>;
  encoding_not_starts_with?: Maybe<String>;
  encoding_ends_with?: Maybe<String>;
  encoding_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  is_verified_not?: Maybe<Boolean>;
  expiry_date?: Maybe<DateTimeInput>;
  expiry_date_not?: Maybe<DateTimeInput>;
  expiry_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiry_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiry_date_lt?: Maybe<DateTimeInput>;
  expiry_date_lte?: Maybe<DateTimeInput>;
  expiry_date_gt?: Maybe<DateTimeInput>;
  expiry_date_gte?: Maybe<DateTimeInput>;
  is_deleted?: Maybe<Boolean>;
  is_deleted_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    PersonnelDocumentsScalarWhereInput[] | PersonnelDocumentsScalarWhereInput
  >;
  OR?: Maybe<
    PersonnelDocumentsScalarWhereInput[] | PersonnelDocumentsScalarWhereInput
  >;
  NOT?: Maybe<
    PersonnelDocumentsScalarWhereInput[] | PersonnelDocumentsScalarWhereInput
  >;
}

export interface PersonnelDocumentsUpdateManyWithWhereNestedInput {
  where: PersonnelDocumentsScalarWhereInput;
  data: PersonnelDocumentsUpdateManyDataInput;
}

export interface PersonnelDocumentsUpdateManyDataInput {
  doc_name?: Maybe<String>;
  doc_type?: Maybe<PersonnelDocumentTypes>;
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  expiry_date?: Maybe<DateTimeInput>;
  is_deleted?: Maybe<Boolean>;
}

export interface PersonnelPhotosUpdateManyInput {
  create?: Maybe<PersonnelPhotosCreateInput[] | PersonnelPhotosCreateInput>;
  update?: Maybe<
    | PersonnelPhotosUpdateWithWhereUniqueNestedInput[]
    | PersonnelPhotosUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | PersonnelPhotosUpsertWithWhereUniqueNestedInput[]
    | PersonnelPhotosUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    PersonnelPhotosWhereUniqueInput[] | PersonnelPhotosWhereUniqueInput
  >;
  connect?: Maybe<
    PersonnelPhotosWhereUniqueInput[] | PersonnelPhotosWhereUniqueInput
  >;
  set?: Maybe<
    PersonnelPhotosWhereUniqueInput[] | PersonnelPhotosWhereUniqueInput
  >;
  disconnect?: Maybe<
    PersonnelPhotosWhereUniqueInput[] | PersonnelPhotosWhereUniqueInput
  >;
  deleteMany?: Maybe<
    PersonnelPhotosScalarWhereInput[] | PersonnelPhotosScalarWhereInput
  >;
  updateMany?: Maybe<
    | PersonnelPhotosUpdateManyWithWhereNestedInput[]
    | PersonnelPhotosUpdateManyWithWhereNestedInput
  >;
}

export interface PersonnelPhotosUpdateWithWhereUniqueNestedInput {
  where: PersonnelPhotosWhereUniqueInput;
  data: PersonnelPhotosUpdateDataInput;
}

export interface PersonnelPhotosUpdateDataInput {
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
  is_primary?: Maybe<Boolean>;
  is_deleted?: Maybe<Boolean>;
}

export interface PersonnelPhotosUpsertWithWhereUniqueNestedInput {
  where: PersonnelPhotosWhereUniqueInput;
  update: PersonnelPhotosUpdateDataInput;
  create: PersonnelPhotosCreateInput;
}

export interface PersonnelPhotosScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  filename?: Maybe<String>;
  filename_not?: Maybe<String>;
  filename_in?: Maybe<String[] | String>;
  filename_not_in?: Maybe<String[] | String>;
  filename_lt?: Maybe<String>;
  filename_lte?: Maybe<String>;
  filename_gt?: Maybe<String>;
  filename_gte?: Maybe<String>;
  filename_contains?: Maybe<String>;
  filename_not_contains?: Maybe<String>;
  filename_starts_with?: Maybe<String>;
  filename_not_starts_with?: Maybe<String>;
  filename_ends_with?: Maybe<String>;
  filename_not_ends_with?: Maybe<String>;
  mimetype?: Maybe<String>;
  mimetype_not?: Maybe<String>;
  mimetype_in?: Maybe<String[] | String>;
  mimetype_not_in?: Maybe<String[] | String>;
  mimetype_lt?: Maybe<String>;
  mimetype_lte?: Maybe<String>;
  mimetype_gt?: Maybe<String>;
  mimetype_gte?: Maybe<String>;
  mimetype_contains?: Maybe<String>;
  mimetype_not_contains?: Maybe<String>;
  mimetype_starts_with?: Maybe<String>;
  mimetype_not_starts_with?: Maybe<String>;
  mimetype_ends_with?: Maybe<String>;
  mimetype_not_ends_with?: Maybe<String>;
  encoding?: Maybe<String>;
  encoding_not?: Maybe<String>;
  encoding_in?: Maybe<String[] | String>;
  encoding_not_in?: Maybe<String[] | String>;
  encoding_lt?: Maybe<String>;
  encoding_lte?: Maybe<String>;
  encoding_gt?: Maybe<String>;
  encoding_gte?: Maybe<String>;
  encoding_contains?: Maybe<String>;
  encoding_not_contains?: Maybe<String>;
  encoding_starts_with?: Maybe<String>;
  encoding_not_starts_with?: Maybe<String>;
  encoding_ends_with?: Maybe<String>;
  encoding_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  is_primary?: Maybe<Boolean>;
  is_primary_not?: Maybe<Boolean>;
  is_deleted?: Maybe<Boolean>;
  is_deleted_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    PersonnelPhotosScalarWhereInput[] | PersonnelPhotosScalarWhereInput
  >;
  OR?: Maybe<
    PersonnelPhotosScalarWhereInput[] | PersonnelPhotosScalarWhereInput
  >;
  NOT?: Maybe<
    PersonnelPhotosScalarWhereInput[] | PersonnelPhotosScalarWhereInput
  >;
}

export interface PersonnelPhotosUpdateManyWithWhereNestedInput {
  where: PersonnelPhotosScalarWhereInput;
  data: PersonnelPhotosUpdateManyDataInput;
}

export interface PersonnelPhotosUpdateManyDataInput {
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
  is_primary?: Maybe<Boolean>;
  is_deleted?: Maybe<Boolean>;
}

export interface PersonnelReferencesUpdateManyInput {
  create?: Maybe<
    PersonnelReferencesCreateInput[] | PersonnelReferencesCreateInput
  >;
  update?: Maybe<
    | PersonnelReferencesUpdateWithWhereUniqueNestedInput[]
    | PersonnelReferencesUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | PersonnelReferencesUpsertWithWhereUniqueNestedInput[]
    | PersonnelReferencesUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    PersonnelReferencesWhereUniqueInput[] | PersonnelReferencesWhereUniqueInput
  >;
  connect?: Maybe<
    PersonnelReferencesWhereUniqueInput[] | PersonnelReferencesWhereUniqueInput
  >;
  set?: Maybe<
    PersonnelReferencesWhereUniqueInput[] | PersonnelReferencesWhereUniqueInput
  >;
  disconnect?: Maybe<
    PersonnelReferencesWhereUniqueInput[] | PersonnelReferencesWhereUniqueInput
  >;
  deleteMany?: Maybe<
    PersonnelReferencesScalarWhereInput[] | PersonnelReferencesScalarWhereInput
  >;
  updateMany?: Maybe<
    | PersonnelReferencesUpdateManyWithWhereNestedInput[]
    | PersonnelReferencesUpdateManyWithWhereNestedInput
  >;
}

export interface PersonnelReferencesUpdateWithWhereUniqueNestedInput {
  where: PersonnelReferencesWhereUniqueInput;
  data: PersonnelReferencesUpdateDataInput;
}

export interface PersonnelReferencesUpdateDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
}

export interface PersonnelReferencesUpsertWithWhereUniqueNestedInput {
  where: PersonnelReferencesWhereUniqueInput;
  update: PersonnelReferencesUpdateDataInput;
  create: PersonnelReferencesCreateInput;
}

export interface PersonnelReferencesScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    PersonnelReferencesScalarWhereInput[] | PersonnelReferencesScalarWhereInput
  >;
  OR?: Maybe<
    PersonnelReferencesScalarWhereInput[] | PersonnelReferencesScalarWhereInput
  >;
  NOT?: Maybe<
    PersonnelReferencesScalarWhereInput[] | PersonnelReferencesScalarWhereInput
  >;
}

export interface PersonnelReferencesUpdateManyWithWhereNestedInput {
  where: PersonnelReferencesScalarWhereInput;
  data: PersonnelReferencesUpdateManyDataInput;
}

export interface PersonnelReferencesUpdateManyDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
}

export interface PersonnelInterviewUpdateManyInput {
  create?: Maybe<
    PersonnelInterviewCreateInput[] | PersonnelInterviewCreateInput
  >;
  update?: Maybe<
    | PersonnelInterviewUpdateWithWhereUniqueNestedInput[]
    | PersonnelInterviewUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | PersonnelInterviewUpsertWithWhereUniqueNestedInput[]
    | PersonnelInterviewUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    PersonnelInterviewWhereUniqueInput[] | PersonnelInterviewWhereUniqueInput
  >;
  connect?: Maybe<
    PersonnelInterviewWhereUniqueInput[] | PersonnelInterviewWhereUniqueInput
  >;
  set?: Maybe<
    PersonnelInterviewWhereUniqueInput[] | PersonnelInterviewWhereUniqueInput
  >;
  disconnect?: Maybe<
    PersonnelInterviewWhereUniqueInput[] | PersonnelInterviewWhereUniqueInput
  >;
  deleteMany?: Maybe<
    PersonnelInterviewScalarWhereInput[] | PersonnelInterviewScalarWhereInput
  >;
  updateMany?: Maybe<
    | PersonnelInterviewUpdateManyWithWhereNestedInput[]
    | PersonnelInterviewUpdateManyWithWhereNestedInput
  >;
}

export interface PersonnelInterviewUpdateWithWhereUniqueNestedInput {
  where: PersonnelInterviewWhereUniqueInput;
  data: PersonnelInterviewUpdateDataInput;
}

export interface PersonnelInterviewUpdateDataInput {
  interviewed_by?: Maybe<UserUpdateOneRequiredInput>;
  interviewed_date?: Maybe<DateTimeInput>;
  status?: Maybe<String>;
}

export interface PersonnelInterviewUpsertWithWhereUniqueNestedInput {
  where: PersonnelInterviewWhereUniqueInput;
  update: PersonnelInterviewUpdateDataInput;
  create: PersonnelInterviewCreateInput;
}

export interface PersonnelInterviewScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  interviewed_date?: Maybe<DateTimeInput>;
  interviewed_date_not?: Maybe<DateTimeInput>;
  interviewed_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  interviewed_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  interviewed_date_lt?: Maybe<DateTimeInput>;
  interviewed_date_lte?: Maybe<DateTimeInput>;
  interviewed_date_gt?: Maybe<DateTimeInput>;
  interviewed_date_gte?: Maybe<DateTimeInput>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    PersonnelInterviewScalarWhereInput[] | PersonnelInterviewScalarWhereInput
  >;
  OR?: Maybe<
    PersonnelInterviewScalarWhereInput[] | PersonnelInterviewScalarWhereInput
  >;
  NOT?: Maybe<
    PersonnelInterviewScalarWhereInput[] | PersonnelInterviewScalarWhereInput
  >;
}

export interface PersonnelInterviewUpdateManyWithWhereNestedInput {
  where: PersonnelInterviewScalarWhereInput;
  data: PersonnelInterviewUpdateManyDataInput;
}

export interface PersonnelInterviewUpdateManyDataInput {
  interviewed_date?: Maybe<DateTimeInput>;
  status?: Maybe<String>;
}

export interface PersonnelMetaUpdateManyMutationInput {
  driving_licence_id?: Maybe<String>;
  biograhpy?: Maybe<String>;
  experience?: Maybe<String>;
  certification?: Maybe<String>;
  social_security_number?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
}

export interface PersonnelPhotosUpdateInput {
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
  is_primary?: Maybe<Boolean>;
  is_deleted?: Maybe<Boolean>;
}

export interface PersonnelPhotosUpdateManyMutationInput {
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
  is_primary?: Maybe<Boolean>;
  is_deleted?: Maybe<Boolean>;
}

export interface PersonnelReferencesUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
}

export interface PersonnelReferencesUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  title: String;
  content: String;
  comments?: Maybe<CommentCreateManyInput>;
}

export interface CommentCreateManyInput {
  create?: Maybe<CommentCreateInput[] | CommentCreateInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface PostUpdateInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyInput>;
}

export interface CommentUpdateManyInput {
  create?: Maybe<CommentCreateInput[] | CommentCreateInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueNestedInput[]
    | CommentUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueNestedInput[]
    | CommentUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateDataInput;
}

export interface CommentUpdateDataInput {
  content?: Maybe<String>;
  is_deleted?: Maybe<Boolean>;
}

export interface CommentUpsertWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateDataInput;
  create: CommentCreateInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  is_deleted?: Maybe<Boolean>;
  is_deleted_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  content?: Maybe<String>;
  is_deleted?: Maybe<Boolean>;
}

export interface PostUpdateManyMutationInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  phone?: Maybe<String>;
  company?: Maybe<String>;
  date_of_birth?: Maybe<DateTimeInput>;
  type?: Maybe<UserType>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  phone?: Maybe<String>;
  company?: Maybe<String>;
  date_of_birth?: Maybe<DateTimeInput>;
  type?: Maybe<UserType>;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface PersonnelDocumentsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PersonnelDocumentsWhereInput>;
  AND?: Maybe<
    | PersonnelDocumentsSubscriptionWhereInput[]
    | PersonnelDocumentsSubscriptionWhereInput
  >;
  OR?: Maybe<
    | PersonnelDocumentsSubscriptionWhereInput[]
    | PersonnelDocumentsSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | PersonnelDocumentsSubscriptionWhereInput[]
    | PersonnelDocumentsSubscriptionWhereInput
  >;
}

export interface PersonnelInterviewSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PersonnelInterviewWhereInput>;
  AND?: Maybe<
    | PersonnelInterviewSubscriptionWhereInput[]
    | PersonnelInterviewSubscriptionWhereInput
  >;
  OR?: Maybe<
    | PersonnelInterviewSubscriptionWhereInput[]
    | PersonnelInterviewSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | PersonnelInterviewSubscriptionWhereInput[]
    | PersonnelInterviewSubscriptionWhereInput
  >;
}

export interface PersonnelMetaSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PersonnelMetaWhereInput>;
  AND?: Maybe<
    PersonnelMetaSubscriptionWhereInput[] | PersonnelMetaSubscriptionWhereInput
  >;
  OR?: Maybe<
    PersonnelMetaSubscriptionWhereInput[] | PersonnelMetaSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PersonnelMetaSubscriptionWhereInput[] | PersonnelMetaSubscriptionWhereInput
  >;
}

export interface PersonnelPhotosSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PersonnelPhotosWhereInput>;
  AND?: Maybe<
    | PersonnelPhotosSubscriptionWhereInput[]
    | PersonnelPhotosSubscriptionWhereInput
  >;
  OR?: Maybe<
    | PersonnelPhotosSubscriptionWhereInput[]
    | PersonnelPhotosSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | PersonnelPhotosSubscriptionWhereInput[]
    | PersonnelPhotosSubscriptionWhereInput
  >;
}

export interface PersonnelReferencesSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PersonnelReferencesWhereInput>;
  AND?: Maybe<
    | PersonnelReferencesSubscriptionWhereInput[]
    | PersonnelReferencesSubscriptionWhereInput
  >;
  OR?: Maybe<
    | PersonnelReferencesSubscriptionWhereInput[]
    | PersonnelReferencesSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | PersonnelReferencesSubscriptionWhereInput[]
    | PersonnelReferencesSubscriptionWhereInput
  >;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Comment {
  id: ID_Output;
  content?: String;
  is_deleted?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  is_deleted: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  is_deleted: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  is_deleted: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PersonnelDocuments {
  id: ID_Output;
  doc_name: String;
  doc_type: PersonnelDocumentTypes;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
  is_verified?: Boolean;
  expiry_date?: DateTimeOutput;
  is_deleted?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelDocumentsPromise
  extends Promise<PersonnelDocuments>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  doc_name: () => Promise<String>;
  doc_type: () => Promise<PersonnelDocumentTypes>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
  is_verified: () => Promise<Boolean>;
  expiry_date: () => Promise<DateTimeOutput>;
  is_deleted: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelDocumentsSubscription
  extends Promise<AsyncIterator<PersonnelDocuments>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  doc_name: () => Promise<AsyncIterator<String>>;
  doc_type: () => Promise<AsyncIterator<PersonnelDocumentTypes>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  is_verified: () => Promise<AsyncIterator<Boolean>>;
  expiry_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  is_deleted: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelDocumentsNullablePromise
  extends Promise<PersonnelDocuments | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  doc_name: () => Promise<String>;
  doc_type: () => Promise<PersonnelDocumentTypes>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
  is_verified: () => Promise<Boolean>;
  expiry_date: () => Promise<DateTimeOutput>;
  is_deleted: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelDocumentsConnection {
  pageInfo: PageInfo;
  edges: PersonnelDocumentsEdge[];
}

export interface PersonnelDocumentsConnectionPromise
  extends Promise<PersonnelDocumentsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonnelDocumentsEdge>>() => T;
  aggregate: <T = AggregatePersonnelDocumentsPromise>() => T;
}

export interface PersonnelDocumentsConnectionSubscription
  extends Promise<AsyncIterator<PersonnelDocumentsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<PersonnelDocumentsEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregatePersonnelDocumentsSubscription>() => T;
}

export interface PersonnelDocumentsEdge {
  node: PersonnelDocuments;
  cursor: String;
}

export interface PersonnelDocumentsEdgePromise
  extends Promise<PersonnelDocumentsEdge>,
    Fragmentable {
  node: <T = PersonnelDocumentsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonnelDocumentsEdgeSubscription
  extends Promise<AsyncIterator<PersonnelDocumentsEdge>>,
    Fragmentable {
  node: <T = PersonnelDocumentsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePersonnelDocuments {
  count: Int;
}

export interface AggregatePersonnelDocumentsPromise
  extends Promise<AggregatePersonnelDocuments>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonnelDocumentsSubscription
  extends Promise<AsyncIterator<AggregatePersonnelDocuments>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PersonnelInterview {
  id: ID_Output;
  interviewed_date: DateTimeOutput;
  status: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelInterviewPromise
  extends Promise<PersonnelInterview>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  interviewed_by: <T = UserPromise>() => T;
  interviewed_date: () => Promise<DateTimeOutput>;
  status: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelInterviewSubscription
  extends Promise<AsyncIterator<PersonnelInterview>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  interviewed_by: <T = UserSubscription>() => T;
  interviewed_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelInterviewNullablePromise
  extends Promise<PersonnelInterview | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  interviewed_by: <T = UserPromise>() => T;
  interviewed_date: () => Promise<DateTimeOutput>;
  status: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name?: String;
  address?: String;
  city?: String;
  state?: String;
  zip?: String;
  phone?: String;
  company?: String;
  date_of_birth?: DateTimeOutput;
  type?: UserType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<String>;
  phone: () => Promise<String>;
  company: () => Promise<String>;
  date_of_birth: () => Promise<DateTimeOutput>;
  type: () => Promise<UserType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  company: () => Promise<AsyncIterator<String>>;
  date_of_birth: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<UserType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<String>;
  phone: () => Promise<String>;
  company: () => Promise<String>;
  date_of_birth: () => Promise<DateTimeOutput>;
  type: () => Promise<UserType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelInterviewConnection {
  pageInfo: PageInfo;
  edges: PersonnelInterviewEdge[];
}

export interface PersonnelInterviewConnectionPromise
  extends Promise<PersonnelInterviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonnelInterviewEdge>>() => T;
  aggregate: <T = AggregatePersonnelInterviewPromise>() => T;
}

export interface PersonnelInterviewConnectionSubscription
  extends Promise<AsyncIterator<PersonnelInterviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<PersonnelInterviewEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregatePersonnelInterviewSubscription>() => T;
}

export interface PersonnelInterviewEdge {
  node: PersonnelInterview;
  cursor: String;
}

export interface PersonnelInterviewEdgePromise
  extends Promise<PersonnelInterviewEdge>,
    Fragmentable {
  node: <T = PersonnelInterviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonnelInterviewEdgeSubscription
  extends Promise<AsyncIterator<PersonnelInterviewEdge>>,
    Fragmentable {
  node: <T = PersonnelInterviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePersonnelInterview {
  count: Int;
}

export interface AggregatePersonnelInterviewPromise
  extends Promise<AggregatePersonnelInterview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonnelInterviewSubscription
  extends Promise<AsyncIterator<AggregatePersonnelInterview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PersonnelMeta {
  id: ID_Output;
  driving_licence_id?: String;
  biograhpy?: String;
  experience?: String;
  certification?: String;
  social_security_number?: String;
  is_verified?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelMetaPromise
  extends Promise<PersonnelMeta>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  driving_licence_id: () => Promise<String>;
  biograhpy: () => Promise<String>;
  experience: () => Promise<String>;
  certification: () => Promise<String>;
  social_security_number: () => Promise<String>;
  documents: <T = FragmentableArray<PersonnelDocuments>>(args?: {
    where?: PersonnelDocumentsWhereInput;
    orderBy?: PersonnelDocumentsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  photos: <T = FragmentableArray<PersonnelPhotos>>(args?: {
    where?: PersonnelPhotosWhereInput;
    orderBy?: PersonnelPhotosOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  references: <T = FragmentableArray<PersonnelReferences>>(args?: {
    where?: PersonnelReferencesWhereInput;
    orderBy?: PersonnelReferencesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  interviews: <T = FragmentableArray<PersonnelInterview>>(args?: {
    where?: PersonnelInterviewWhereInput;
    orderBy?: PersonnelInterviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  is_verified: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelMetaSubscription
  extends Promise<AsyncIterator<PersonnelMeta>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  driving_licence_id: () => Promise<AsyncIterator<String>>;
  biograhpy: () => Promise<AsyncIterator<String>>;
  experience: () => Promise<AsyncIterator<String>>;
  certification: () => Promise<AsyncIterator<String>>;
  social_security_number: () => Promise<AsyncIterator<String>>;
  documents: <
    T = Promise<AsyncIterator<PersonnelDocumentsSubscription>>
  >(args?: {
    where?: PersonnelDocumentsWhereInput;
    orderBy?: PersonnelDocumentsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  photos: <T = Promise<AsyncIterator<PersonnelPhotosSubscription>>>(args?: {
    where?: PersonnelPhotosWhereInput;
    orderBy?: PersonnelPhotosOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  references: <
    T = Promise<AsyncIterator<PersonnelReferencesSubscription>>
  >(args?: {
    where?: PersonnelReferencesWhereInput;
    orderBy?: PersonnelReferencesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  interviews: <
    T = Promise<AsyncIterator<PersonnelInterviewSubscription>>
  >(args?: {
    where?: PersonnelInterviewWhereInput;
    orderBy?: PersonnelInterviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  is_verified: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelMetaNullablePromise
  extends Promise<PersonnelMeta | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  driving_licence_id: () => Promise<String>;
  biograhpy: () => Promise<String>;
  experience: () => Promise<String>;
  certification: () => Promise<String>;
  social_security_number: () => Promise<String>;
  documents: <T = FragmentableArray<PersonnelDocuments>>(args?: {
    where?: PersonnelDocumentsWhereInput;
    orderBy?: PersonnelDocumentsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  photos: <T = FragmentableArray<PersonnelPhotos>>(args?: {
    where?: PersonnelPhotosWhereInput;
    orderBy?: PersonnelPhotosOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  references: <T = FragmentableArray<PersonnelReferences>>(args?: {
    where?: PersonnelReferencesWhereInput;
    orderBy?: PersonnelReferencesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  interviews: <T = FragmentableArray<PersonnelInterview>>(args?: {
    where?: PersonnelInterviewWhereInput;
    orderBy?: PersonnelInterviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  is_verified: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelPhotos {
  id: ID_Output;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
  is_primary?: Boolean;
  is_deleted?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelPhotosPromise
  extends Promise<PersonnelPhotos>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
  is_primary: () => Promise<Boolean>;
  is_deleted: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelPhotosSubscription
  extends Promise<AsyncIterator<PersonnelPhotos>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  is_primary: () => Promise<AsyncIterator<Boolean>>;
  is_deleted: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelPhotosNullablePromise
  extends Promise<PersonnelPhotos | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
  is_primary: () => Promise<Boolean>;
  is_deleted: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelReferences {
  id: ID_Output;
  email: String;
  name: String;
  phone: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelReferencesPromise
  extends Promise<PersonnelReferences>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelReferencesSubscription
  extends Promise<AsyncIterator<PersonnelReferences>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelReferencesNullablePromise
  extends Promise<PersonnelReferences | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelMetaConnection {
  pageInfo: PageInfo;
  edges: PersonnelMetaEdge[];
}

export interface PersonnelMetaConnectionPromise
  extends Promise<PersonnelMetaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonnelMetaEdge>>() => T;
  aggregate: <T = AggregatePersonnelMetaPromise>() => T;
}

export interface PersonnelMetaConnectionSubscription
  extends Promise<AsyncIterator<PersonnelMetaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PersonnelMetaEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePersonnelMetaSubscription>() => T;
}

export interface PersonnelMetaEdge {
  node: PersonnelMeta;
  cursor: String;
}

export interface PersonnelMetaEdgePromise
  extends Promise<PersonnelMetaEdge>,
    Fragmentable {
  node: <T = PersonnelMetaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonnelMetaEdgeSubscription
  extends Promise<AsyncIterator<PersonnelMetaEdge>>,
    Fragmentable {
  node: <T = PersonnelMetaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePersonnelMeta {
  count: Int;
}

export interface AggregatePersonnelMetaPromise
  extends Promise<AggregatePersonnelMeta>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonnelMetaSubscription
  extends Promise<AsyncIterator<AggregatePersonnelMeta>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PersonnelPhotosConnection {
  pageInfo: PageInfo;
  edges: PersonnelPhotosEdge[];
}

export interface PersonnelPhotosConnectionPromise
  extends Promise<PersonnelPhotosConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonnelPhotosEdge>>() => T;
  aggregate: <T = AggregatePersonnelPhotosPromise>() => T;
}

export interface PersonnelPhotosConnectionSubscription
  extends Promise<AsyncIterator<PersonnelPhotosConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PersonnelPhotosEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePersonnelPhotosSubscription>() => T;
}

export interface PersonnelPhotosEdge {
  node: PersonnelPhotos;
  cursor: String;
}

export interface PersonnelPhotosEdgePromise
  extends Promise<PersonnelPhotosEdge>,
    Fragmentable {
  node: <T = PersonnelPhotosPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonnelPhotosEdgeSubscription
  extends Promise<AsyncIterator<PersonnelPhotosEdge>>,
    Fragmentable {
  node: <T = PersonnelPhotosSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePersonnelPhotos {
  count: Int;
}

export interface AggregatePersonnelPhotosPromise
  extends Promise<AggregatePersonnelPhotos>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonnelPhotosSubscription
  extends Promise<AsyncIterator<AggregatePersonnelPhotos>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PersonnelReferencesConnection {
  pageInfo: PageInfo;
  edges: PersonnelReferencesEdge[];
}

export interface PersonnelReferencesConnectionPromise
  extends Promise<PersonnelReferencesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonnelReferencesEdge>>() => T;
  aggregate: <T = AggregatePersonnelReferencesPromise>() => T;
}

export interface PersonnelReferencesConnectionSubscription
  extends Promise<AsyncIterator<PersonnelReferencesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<PersonnelReferencesEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregatePersonnelReferencesSubscription>() => T;
}

export interface PersonnelReferencesEdge {
  node: PersonnelReferences;
  cursor: String;
}

export interface PersonnelReferencesEdgePromise
  extends Promise<PersonnelReferencesEdge>,
    Fragmentable {
  node: <T = PersonnelReferencesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonnelReferencesEdgeSubscription
  extends Promise<AsyncIterator<PersonnelReferencesEdge>>,
    Fragmentable {
  node: <T = PersonnelReferencesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePersonnelReferences {
  count: Int;
}

export interface AggregatePersonnelReferencesPromise
  extends Promise<AggregatePersonnelReferences>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonnelReferencesSubscription
  extends Promise<AsyncIterator<AggregatePersonnelReferences>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Post {
  id: ID_Output;
  published: Boolean;
  title: String;
  content: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  content?: String;
  is_deleted?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  is_deleted: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  is_deleted: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelDocumentsSubscriptionPayload {
  mutation: MutationType;
  node: PersonnelDocuments;
  updatedFields: String[];
  previousValues: PersonnelDocumentsPreviousValues;
}

export interface PersonnelDocumentsSubscriptionPayloadPromise
  extends Promise<PersonnelDocumentsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonnelDocumentsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonnelDocumentsPreviousValuesPromise>() => T;
}

export interface PersonnelDocumentsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonnelDocumentsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonnelDocumentsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonnelDocumentsPreviousValuesSubscription>() => T;
}

export interface PersonnelDocumentsPreviousValues {
  id: ID_Output;
  doc_name: String;
  doc_type: PersonnelDocumentTypes;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
  is_verified?: Boolean;
  expiry_date?: DateTimeOutput;
  is_deleted?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelDocumentsPreviousValuesPromise
  extends Promise<PersonnelDocumentsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  doc_name: () => Promise<String>;
  doc_type: () => Promise<PersonnelDocumentTypes>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
  is_verified: () => Promise<Boolean>;
  expiry_date: () => Promise<DateTimeOutput>;
  is_deleted: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelDocumentsPreviousValuesSubscription
  extends Promise<AsyncIterator<PersonnelDocumentsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  doc_name: () => Promise<AsyncIterator<String>>;
  doc_type: () => Promise<AsyncIterator<PersonnelDocumentTypes>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  is_verified: () => Promise<AsyncIterator<Boolean>>;
  expiry_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  is_deleted: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelInterviewSubscriptionPayload {
  mutation: MutationType;
  node: PersonnelInterview;
  updatedFields: String[];
  previousValues: PersonnelInterviewPreviousValues;
}

export interface PersonnelInterviewSubscriptionPayloadPromise
  extends Promise<PersonnelInterviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonnelInterviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonnelInterviewPreviousValuesPromise>() => T;
}

export interface PersonnelInterviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonnelInterviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonnelInterviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonnelInterviewPreviousValuesSubscription>() => T;
}

export interface PersonnelInterviewPreviousValues {
  id: ID_Output;
  interviewed_date: DateTimeOutput;
  status: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelInterviewPreviousValuesPromise
  extends Promise<PersonnelInterviewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  interviewed_date: () => Promise<DateTimeOutput>;
  status: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelInterviewPreviousValuesSubscription
  extends Promise<AsyncIterator<PersonnelInterviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  interviewed_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelMetaSubscriptionPayload {
  mutation: MutationType;
  node: PersonnelMeta;
  updatedFields: String[];
  previousValues: PersonnelMetaPreviousValues;
}

export interface PersonnelMetaSubscriptionPayloadPromise
  extends Promise<PersonnelMetaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonnelMetaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonnelMetaPreviousValuesPromise>() => T;
}

export interface PersonnelMetaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonnelMetaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonnelMetaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonnelMetaPreviousValuesSubscription>() => T;
}

export interface PersonnelMetaPreviousValues {
  id: ID_Output;
  driving_licence_id?: String;
  biograhpy?: String;
  experience?: String;
  certification?: String;
  social_security_number?: String;
  is_verified?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelMetaPreviousValuesPromise
  extends Promise<PersonnelMetaPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  driving_licence_id: () => Promise<String>;
  biograhpy: () => Promise<String>;
  experience: () => Promise<String>;
  certification: () => Promise<String>;
  social_security_number: () => Promise<String>;
  is_verified: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelMetaPreviousValuesSubscription
  extends Promise<AsyncIterator<PersonnelMetaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  driving_licence_id: () => Promise<AsyncIterator<String>>;
  biograhpy: () => Promise<AsyncIterator<String>>;
  experience: () => Promise<AsyncIterator<String>>;
  certification: () => Promise<AsyncIterator<String>>;
  social_security_number: () => Promise<AsyncIterator<String>>;
  is_verified: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelPhotosSubscriptionPayload {
  mutation: MutationType;
  node: PersonnelPhotos;
  updatedFields: String[];
  previousValues: PersonnelPhotosPreviousValues;
}

export interface PersonnelPhotosSubscriptionPayloadPromise
  extends Promise<PersonnelPhotosSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonnelPhotosPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonnelPhotosPreviousValuesPromise>() => T;
}

export interface PersonnelPhotosSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonnelPhotosSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonnelPhotosSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonnelPhotosPreviousValuesSubscription>() => T;
}

export interface PersonnelPhotosPreviousValues {
  id: ID_Output;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
  is_primary?: Boolean;
  is_deleted?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelPhotosPreviousValuesPromise
  extends Promise<PersonnelPhotosPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
  is_primary: () => Promise<Boolean>;
  is_deleted: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelPhotosPreviousValuesSubscription
  extends Promise<AsyncIterator<PersonnelPhotosPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  is_primary: () => Promise<AsyncIterator<Boolean>>;
  is_deleted: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelReferencesSubscriptionPayload {
  mutation: MutationType;
  node: PersonnelReferences;
  updatedFields: String[];
  previousValues: PersonnelReferencesPreviousValues;
}

export interface PersonnelReferencesSubscriptionPayloadPromise
  extends Promise<PersonnelReferencesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonnelReferencesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonnelReferencesPreviousValuesPromise>() => T;
}

export interface PersonnelReferencesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonnelReferencesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonnelReferencesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonnelReferencesPreviousValuesSubscription>() => T;
}

export interface PersonnelReferencesPreviousValues {
  id: ID_Output;
  email: String;
  name: String;
  phone: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelReferencesPreviousValuesPromise
  extends Promise<PersonnelReferencesPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelReferencesPreviousValuesSubscription
  extends Promise<AsyncIterator<PersonnelReferencesPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  published: Boolean;
  title: String;
  content: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name?: String;
  address?: String;
  city?: String;
  state?: String;
  zip?: String;
  phone?: String;
  company?: String;
  date_of_birth?: DateTimeOutput;
  type?: UserType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<String>;
  phone: () => Promise<String>;
  company: () => Promise<String>;
  date_of_birth: () => Promise<DateTimeOutput>;
  type: () => Promise<UserType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  company: () => Promise<AsyncIterator<String>>;
  date_of_birth: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<UserType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "UserType",
    embedded: false
  },
  {
    name: "PersonnelDocumentTypes",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "PersonnelMeta",
    embedded: false
  },
  {
    name: "PersonnelDocuments",
    embedded: false
  },
  {
    name: "PersonnelPhotos",
    embedded: false
  },
  {
    name: "PersonnelReferences",
    embedded: false
  },
  {
    name: "PersonnelInterview",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
