// Code generated by Prisma (prisma@1.27.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  personnelDocuments: (
    where?: PersonnelDocumentsWhereInput
  ) => Promise<boolean>;
  personnelInterview: (
    where?: PersonnelInterviewWhereInput
  ) => Promise<boolean>;
  personnelMeta: (where?: PersonnelMetaWhereInput) => Promise<boolean>;
  personnelPhotos: (where?: PersonnelPhotosWhereInput) => Promise<boolean>;
  personnelReferences: (
    where?: PersonnelReferencesWhereInput
  ) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentPromise;
  comments: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Comment>;
  commentsConnection: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CommentConnectionPromise;
  personnelDocuments: (
    where: PersonnelDocumentsWhereUniqueInput
  ) => PersonnelDocumentsPromise;
  personnelDocumentses: (
    args?: {
      where?: PersonnelDocumentsWhereInput;
      orderBy?: PersonnelDocumentsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<PersonnelDocuments>;
  personnelDocumentsesConnection: (
    args?: {
      where?: PersonnelDocumentsWhereInput;
      orderBy?: PersonnelDocumentsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PersonnelDocumentsConnectionPromise;
  personnelInterview: (
    where: PersonnelInterviewWhereUniqueInput
  ) => PersonnelInterviewPromise;
  personnelInterviews: (
    args?: {
      where?: PersonnelInterviewWhereInput;
      orderBy?: PersonnelInterviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<PersonnelInterview>;
  personnelInterviewsConnection: (
    args?: {
      where?: PersonnelInterviewWhereInput;
      orderBy?: PersonnelInterviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PersonnelInterviewConnectionPromise;
  personnelMeta: (where: PersonnelMetaWhereUniqueInput) => PersonnelMetaPromise;
  personnelMetas: (
    args?: {
      where?: PersonnelMetaWhereInput;
      orderBy?: PersonnelMetaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<PersonnelMeta>;
  personnelMetasConnection: (
    args?: {
      where?: PersonnelMetaWhereInput;
      orderBy?: PersonnelMetaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PersonnelMetaConnectionPromise;
  personnelPhotos: (
    where: PersonnelPhotosWhereUniqueInput
  ) => PersonnelPhotosPromise;
  personnelPhotoses: (
    args?: {
      where?: PersonnelPhotosWhereInput;
      orderBy?: PersonnelPhotosOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<PersonnelPhotos>;
  personnelPhotosesConnection: (
    args?: {
      where?: PersonnelPhotosWhereInput;
      orderBy?: PersonnelPhotosOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PersonnelPhotosConnectionPromise;
  personnelReferences: (
    where: PersonnelReferencesWhereUniqueInput
  ) => PersonnelReferencesPromise;
  personnelReferenceses: (
    args?: {
      where?: PersonnelReferencesWhereInput;
      orderBy?: PersonnelReferencesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<PersonnelReferences>;
  personnelReferencesesConnection: (
    args?: {
      where?: PersonnelReferencesWhereInput;
      orderBy?: PersonnelReferencesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PersonnelReferencesConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (
    args: { data: CommentUpdateInput; where: CommentWhereUniqueInput }
  ) => CommentPromise;
  updateManyComments: (
    args: { data: CommentUpdateManyMutationInput; where?: CommentWhereInput }
  ) => BatchPayloadPromise;
  upsertComment: (
    args: {
      where: CommentWhereUniqueInput;
      create: CommentCreateInput;
      update: CommentUpdateInput;
    }
  ) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createPersonnelDocuments: (
    data: PersonnelDocumentsCreateInput
  ) => PersonnelDocumentsPromise;
  updatePersonnelDocuments: (
    args: {
      data: PersonnelDocumentsUpdateInput;
      where: PersonnelDocumentsWhereUniqueInput;
    }
  ) => PersonnelDocumentsPromise;
  updateManyPersonnelDocumentses: (
    args: {
      data: PersonnelDocumentsUpdateManyMutationInput;
      where?: PersonnelDocumentsWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertPersonnelDocuments: (
    args: {
      where: PersonnelDocumentsWhereUniqueInput;
      create: PersonnelDocumentsCreateInput;
      update: PersonnelDocumentsUpdateInput;
    }
  ) => PersonnelDocumentsPromise;
  deletePersonnelDocuments: (
    where: PersonnelDocumentsWhereUniqueInput
  ) => PersonnelDocumentsPromise;
  deleteManyPersonnelDocumentses: (
    where?: PersonnelDocumentsWhereInput
  ) => BatchPayloadPromise;
  createPersonnelInterview: (
    data: PersonnelInterviewCreateInput
  ) => PersonnelInterviewPromise;
  updatePersonnelInterview: (
    args: {
      data: PersonnelInterviewUpdateInput;
      where: PersonnelInterviewWhereUniqueInput;
    }
  ) => PersonnelInterviewPromise;
  updateManyPersonnelInterviews: (
    args: {
      data: PersonnelInterviewUpdateManyMutationInput;
      where?: PersonnelInterviewWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertPersonnelInterview: (
    args: {
      where: PersonnelInterviewWhereUniqueInput;
      create: PersonnelInterviewCreateInput;
      update: PersonnelInterviewUpdateInput;
    }
  ) => PersonnelInterviewPromise;
  deletePersonnelInterview: (
    where: PersonnelInterviewWhereUniqueInput
  ) => PersonnelInterviewPromise;
  deleteManyPersonnelInterviews: (
    where?: PersonnelInterviewWhereInput
  ) => BatchPayloadPromise;
  createPersonnelMeta: (data: PersonnelMetaCreateInput) => PersonnelMetaPromise;
  updatePersonnelMeta: (
    args: {
      data: PersonnelMetaUpdateInput;
      where: PersonnelMetaWhereUniqueInput;
    }
  ) => PersonnelMetaPromise;
  updateManyPersonnelMetas: (
    args: {
      data: PersonnelMetaUpdateManyMutationInput;
      where?: PersonnelMetaWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertPersonnelMeta: (
    args: {
      where: PersonnelMetaWhereUniqueInput;
      create: PersonnelMetaCreateInput;
      update: PersonnelMetaUpdateInput;
    }
  ) => PersonnelMetaPromise;
  deletePersonnelMeta: (
    where: PersonnelMetaWhereUniqueInput
  ) => PersonnelMetaPromise;
  deleteManyPersonnelMetas: (
    where?: PersonnelMetaWhereInput
  ) => BatchPayloadPromise;
  createPersonnelPhotos: (
    data: PersonnelPhotosCreateInput
  ) => PersonnelPhotosPromise;
  updatePersonnelPhotos: (
    args: {
      data: PersonnelPhotosUpdateInput;
      where: PersonnelPhotosWhereUniqueInput;
    }
  ) => PersonnelPhotosPromise;
  updateManyPersonnelPhotoses: (
    args: {
      data: PersonnelPhotosUpdateManyMutationInput;
      where?: PersonnelPhotosWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertPersonnelPhotos: (
    args: {
      where: PersonnelPhotosWhereUniqueInput;
      create: PersonnelPhotosCreateInput;
      update: PersonnelPhotosUpdateInput;
    }
  ) => PersonnelPhotosPromise;
  deletePersonnelPhotos: (
    where: PersonnelPhotosWhereUniqueInput
  ) => PersonnelPhotosPromise;
  deleteManyPersonnelPhotoses: (
    where?: PersonnelPhotosWhereInput
  ) => BatchPayloadPromise;
  createPersonnelReferences: (
    data: PersonnelReferencesCreateInput
  ) => PersonnelReferencesPromise;
  updatePersonnelReferences: (
    args: {
      data: PersonnelReferencesUpdateInput;
      where: PersonnelReferencesWhereUniqueInput;
    }
  ) => PersonnelReferencesPromise;
  updateManyPersonnelReferenceses: (
    args: {
      data: PersonnelReferencesUpdateManyMutationInput;
      where?: PersonnelReferencesWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertPersonnelReferences: (
    args: {
      where: PersonnelReferencesWhereUniqueInput;
      create: PersonnelReferencesCreateInput;
      update: PersonnelReferencesUpdateInput;
    }
  ) => PersonnelReferencesPromise;
  deletePersonnelReferences: (
    where: PersonnelReferencesWhereUniqueInput
  ) => PersonnelReferencesPromise;
  deleteManyPersonnelReferenceses: (
    where?: PersonnelReferencesWhereInput
  ) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  personnelDocuments: (
    where?: PersonnelDocumentsSubscriptionWhereInput
  ) => PersonnelDocumentsSubscriptionPayloadSubscription;
  personnelInterview: (
    where?: PersonnelInterviewSubscriptionWhereInput
  ) => PersonnelInterviewSubscriptionPayloadSubscription;
  personnelMeta: (
    where?: PersonnelMetaSubscriptionWhereInput
  ) => PersonnelMetaSubscriptionPayloadSubscription;
  personnelPhotos: (
    where?: PersonnelPhotosSubscriptionWhereInput
  ) => PersonnelPhotosSubscriptionPayloadSubscription;
  personnelReferences: (
    where?: PersonnelReferencesSubscriptionWhereInput
  ) => PersonnelReferencesSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PersonnelReferencesOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PersonnelDocumentTypes =
  | "GUARD_CARD"
  | "BATON_PERMIT"
  | "CPR_CERTIFICATE"
  | "RESUME"
  | "EXPOSED_FIREARM_PERMIT"
  | "CCW_PERMIT"
  | "POST_CERTIFICATION"
  | "DD214"
  | "OTHERS";

export type PersonnelDocumentsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "doc_name_ASC"
  | "doc_name_DESC"
  | "doc_type_ASC"
  | "doc_type_DESC"
  | "filename_ASC"
  | "filename_DESC"
  | "mimetype_ASC"
  | "mimetype_DESC"
  | "encoding_ASC"
  | "encoding_DESC"
  | "url_ASC"
  | "url_DESC"
  | "is_verified_ASC"
  | "is_verified_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserType = "ADMIN" | "CLIENT" | "PERSONNEL";

export type PersonnelInterviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "interviewed_date_ASC"
  | "interviewed_date_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PersonnelPhotosOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "filename_ASC"
  | "filename_DESC"
  | "mimetype_ASC"
  | "mimetype_DESC"
  | "encoding_ASC"
  | "encoding_DESC"
  | "url_ASC"
  | "url_DESC"
  | "is_primary_ASC"
  | "is_primary_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "is_deleted_ASC"
  | "is_deleted_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PersonnelMetaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "driving_licence_id_ASC"
  | "driving_licence_id_DESC"
  | "biograhpy_ASC"
  | "biograhpy_DESC"
  | "experience_ASC"
  | "experience_DESC"
  | "certification_ASC"
  | "certification_DESC"
  | "social_security_number_ASC"
  | "social_security_number_DESC"
  | "is_background_checked_ASC"
  | "is_background_checked_DESC"
  | "is_verified_ASC"
  | "is_verified_DESC"
  | "is_consent_checked_ASC"
  | "is_consent_checked_DESC"
  | "is_creds_verified_ASC"
  | "is_creds_verified_DESC"
  | "is_reference_verified_ASC"
  | "is_reference_verified_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "published_ASC"
  | "published_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "address_ASC"
  | "address_DESC"
  | "city_ASC"
  | "city_DESC"
  | "zip_ASC"
  | "zip_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "company_ASC"
  | "company_DESC"
  | "date_of_birth_ASC"
  | "date_of_birth_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface PersonnelInterviewUpdateManyMutationInput {
  interviewed_date?: DateTimeInput;
  status?: String;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface PersonnelReferencesUpdateWithWhereUniqueNestedInput {
  where: PersonnelReferencesWhereUniqueInput;
  data: PersonnelReferencesUpdateDataInput;
}

export interface PersonnelInterviewUpdateWithWhereUniqueNestedInput {
  where: PersonnelInterviewWhereUniqueInput;
  data: PersonnelInterviewUpdateDataInput;
}

export interface PersonnelReferencesCreateInput {
  email: String;
  name: String;
  phone: String;
}

export interface PersonnelInterviewUpdateManyInput {
  create?: PersonnelInterviewCreateInput[] | PersonnelInterviewCreateInput;
  update?:
    | PersonnelInterviewUpdateWithWhereUniqueNestedInput[]
    | PersonnelInterviewUpdateWithWhereUniqueNestedInput;
  upsert?:
    | PersonnelInterviewUpsertWithWhereUniqueNestedInput[]
    | PersonnelInterviewUpsertWithWhereUniqueNestedInput;
  delete?:
    | PersonnelInterviewWhereUniqueInput[]
    | PersonnelInterviewWhereUniqueInput;
  connect?:
    | PersonnelInterviewWhereUniqueInput[]
    | PersonnelInterviewWhereUniqueInput;
  set?:
    | PersonnelInterviewWhereUniqueInput[]
    | PersonnelInterviewWhereUniqueInput;
  disconnect?:
    | PersonnelInterviewWhereUniqueInput[]
    | PersonnelInterviewWhereUniqueInput;
  deleteMany?:
    | PersonnelInterviewScalarWhereInput[]
    | PersonnelInterviewScalarWhereInput;
  updateMany?:
    | PersonnelInterviewUpdateManyWithWhereNestedInput[]
    | PersonnelInterviewUpdateManyWithWhereNestedInput;
}

export interface PersonnelDocumentsWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  doc_name?: String;
  doc_name_not?: String;
  doc_name_in?: String[] | String;
  doc_name_not_in?: String[] | String;
  doc_name_lt?: String;
  doc_name_lte?: String;
  doc_name_gt?: String;
  doc_name_gte?: String;
  doc_name_contains?: String;
  doc_name_not_contains?: String;
  doc_name_starts_with?: String;
  doc_name_not_starts_with?: String;
  doc_name_ends_with?: String;
  doc_name_not_ends_with?: String;
  doc_type?: PersonnelDocumentTypes;
  doc_type_not?: PersonnelDocumentTypes;
  doc_type_in?: PersonnelDocumentTypes[] | PersonnelDocumentTypes;
  doc_type_not_in?: PersonnelDocumentTypes[] | PersonnelDocumentTypes;
  filename?: String;
  filename_not?: String;
  filename_in?: String[] | String;
  filename_not_in?: String[] | String;
  filename_lt?: String;
  filename_lte?: String;
  filename_gt?: String;
  filename_gte?: String;
  filename_contains?: String;
  filename_not_contains?: String;
  filename_starts_with?: String;
  filename_not_starts_with?: String;
  filename_ends_with?: String;
  filename_not_ends_with?: String;
  mimetype?: String;
  mimetype_not?: String;
  mimetype_in?: String[] | String;
  mimetype_not_in?: String[] | String;
  mimetype_lt?: String;
  mimetype_lte?: String;
  mimetype_gt?: String;
  mimetype_gte?: String;
  mimetype_contains?: String;
  mimetype_not_contains?: String;
  mimetype_starts_with?: String;
  mimetype_not_starts_with?: String;
  mimetype_ends_with?: String;
  mimetype_not_ends_with?: String;
  encoding?: String;
  encoding_not?: String;
  encoding_in?: String[] | String;
  encoding_not_in?: String[] | String;
  encoding_lt?: String;
  encoding_lte?: String;
  encoding_gt?: String;
  encoding_gte?: String;
  encoding_contains?: String;
  encoding_not_contains?: String;
  encoding_starts_with?: String;
  encoding_not_starts_with?: String;
  encoding_ends_with?: String;
  encoding_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  is_verified?: Boolean;
  is_verified_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PersonnelDocumentsWhereInput[] | PersonnelDocumentsWhereInput;
  OR?: PersonnelDocumentsWhereInput[] | PersonnelDocumentsWhereInput;
  NOT?: PersonnelDocumentsWhereInput[] | PersonnelDocumentsWhereInput;
}

export interface PersonnelReferencesUpdateManyDataInput {
  email?: String;
  name?: String;
  phone?: String;
}

export interface PersonnelReferencesSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PersonnelReferencesWhereInput;
  AND?:
    | PersonnelReferencesSubscriptionWhereInput[]
    | PersonnelReferencesSubscriptionWhereInput;
  OR?:
    | PersonnelReferencesSubscriptionWhereInput[]
    | PersonnelReferencesSubscriptionWhereInput;
  NOT?:
    | PersonnelReferencesSubscriptionWhereInput[]
    | PersonnelReferencesSubscriptionWhereInput;
}

export interface PersonnelReferencesUpdateManyWithWhereNestedInput {
  where: PersonnelReferencesScalarWhereInput;
  data: PersonnelReferencesUpdateManyDataInput;
}

export interface PersonnelMetaSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PersonnelMetaWhereInput;
  AND?:
    | PersonnelMetaSubscriptionWhereInput[]
    | PersonnelMetaSubscriptionWhereInput;
  OR?:
    | PersonnelMetaSubscriptionWhereInput[]
    | PersonnelMetaSubscriptionWhereInput;
  NOT?:
    | PersonnelMetaSubscriptionWhereInput[]
    | PersonnelMetaSubscriptionWhereInput;
}

export interface PersonnelInterviewSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PersonnelInterviewWhereInput;
  AND?:
    | PersonnelInterviewSubscriptionWhereInput[]
    | PersonnelInterviewSubscriptionWhereInput;
  OR?:
    | PersonnelInterviewSubscriptionWhereInput[]
    | PersonnelInterviewSubscriptionWhereInput;
  NOT?:
    | PersonnelInterviewSubscriptionWhereInput[]
    | PersonnelInterviewSubscriptionWhereInput;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CommentWhereInput;
  AND?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  OR?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  NOT?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
}

export interface CommentCreateInput {
  content?: String;
  is_deleted?: Boolean;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  zip?: String;
  zip_not?: String;
  zip_in?: String[] | String;
  zip_not_in?: String[] | String;
  zip_lt?: String;
  zip_lte?: String;
  zip_gt?: String;
  zip_gte?: String;
  zip_contains?: String;
  zip_not_contains?: String;
  zip_starts_with?: String;
  zip_not_starts_with?: String;
  zip_ends_with?: String;
  zip_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  company?: String;
  company_not?: String;
  company_in?: String[] | String;
  company_not_in?: String[] | String;
  company_lt?: String;
  company_lte?: String;
  company_gt?: String;
  company_gte?: String;
  company_contains?: String;
  company_not_contains?: String;
  company_starts_with?: String;
  company_not_starts_with?: String;
  company_ends_with?: String;
  company_not_ends_with?: String;
  date_of_birth?: DateTimeInput;
  date_of_birth_not?: DateTimeInput;
  date_of_birth_in?: DateTimeInput[] | DateTimeInput;
  date_of_birth_not_in?: DateTimeInput[] | DateTimeInput;
  date_of_birth_lt?: DateTimeInput;
  date_of_birth_lte?: DateTimeInput;
  date_of_birth_gt?: DateTimeInput;
  date_of_birth_gte?: DateTimeInput;
  type?: UserType;
  type_not?: UserType;
  type_in?: UserType[] | UserType;
  type_not_in?: UserType[] | UserType;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface CommentUpdateInput {
  content?: String;
  is_deleted?: Boolean;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  name?: String;
  address?: String;
  city?: String;
  zip?: String;
  phone?: String;
  company?: String;
  date_of_birth?: DateTimeInput;
  type?: UserType;
}

export interface CommentUpdateManyMutationInput {
  content?: String;
  is_deleted?: Boolean;
}

export interface CommentUpdateManyDataInput {
  content?: String;
  is_deleted?: Boolean;
}

export interface PersonnelReferencesScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?:
    | PersonnelReferencesScalarWhereInput[]
    | PersonnelReferencesScalarWhereInput;
  OR?:
    | PersonnelReferencesScalarWhereInput[]
    | PersonnelReferencesScalarWhereInput;
  NOT?:
    | PersonnelReferencesScalarWhereInput[]
    | PersonnelReferencesScalarWhereInput;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface PersonnelReferencesUpsertWithWhereUniqueNestedInput {
  where: PersonnelReferencesWhereUniqueInput;
  update: PersonnelReferencesUpdateDataInput;
  create: PersonnelReferencesCreateInput;
}

export interface CommentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  is_deleted?: Boolean;
  is_deleted_not?: Boolean;
  AND?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  OR?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  NOT?: CommentScalarWhereInput[] | CommentScalarWhereInput;
}

export interface PersonnelDocumentsCreateInput {
  doc_name: String;
  doc_type: PersonnelDocumentTypes;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
  is_verified?: Boolean;
}

export interface PersonnelReferencesWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PersonnelReferencesWhereInput[] | PersonnelReferencesWhereInput;
  OR?: PersonnelReferencesWhereInput[] | PersonnelReferencesWhereInput;
  NOT?: PersonnelReferencesWhereInput[] | PersonnelReferencesWhereInput;
}

export interface PersonnelDocumentsUpdateInput {
  doc_name?: String;
  doc_type?: PersonnelDocumentTypes;
  filename?: String;
  mimetype?: String;
  encoding?: String;
  url?: String;
  is_verified?: Boolean;
}

export interface CommentUpdateWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateDataInput;
}

export interface PersonnelDocumentsUpdateManyMutationInput {
  doc_name?: String;
  doc_type?: PersonnelDocumentTypes;
  filename?: String;
  mimetype?: String;
  encoding?: String;
  url?: String;
  is_verified?: Boolean;
}

export interface CommentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  is_deleted?: Boolean;
  is_deleted_not?: Boolean;
  AND?: CommentWhereInput[] | CommentWhereInput;
  OR?: CommentWhereInput[] | CommentWhereInput;
  NOT?: CommentWhereInput[] | CommentWhereInput;
}

export interface PersonnelInterviewCreateInput {
  interviewed_by: UserCreateOneInput;
  interviewed_date: DateTimeInput;
  status: String;
}

export interface PostUpdateInput {
  published?: Boolean;
  title?: String;
  content?: String;
  comments?: CommentUpdateManyInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export type PersonnelPhotosWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserCreateInput {
  email: String;
  password: String;
  name?: String;
  address?: String;
  city?: String;
  zip?: String;
  phone?: String;
  company?: String;
  date_of_birth?: DateTimeInput;
  type?: UserType;
}

export interface PersonnelReferencesUpdateManyMutationInput {
  email?: String;
  name?: String;
  phone?: String;
}

export interface PersonnelInterviewUpdateInput {
  interviewed_by?: UserUpdateOneRequiredInput;
  interviewed_date?: DateTimeInput;
  status?: String;
}

export type PersonnelReferencesWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface PersonnelPhotosUpdateInput {
  filename?: String;
  mimetype?: String;
  encoding?: String;
  url?: String;
  is_primary?: Boolean;
}

export interface UserUpdateDataInput {
  email?: String;
  password?: String;
  name?: String;
  address?: String;
  city?: String;
  zip?: String;
  phone?: String;
  company?: String;
  date_of_birth?: DateTimeInput;
  type?: UserType;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  published?: Boolean;
  published_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  comments_every?: CommentWhereInput;
  comments_some?: CommentWhereInput;
  comments_none?: CommentWhereInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface PersonnelReferencesUpdateDataInput {
  email?: String;
  name?: String;
  phone?: String;
}

export interface PersonnelInterviewScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  interviewed_date?: DateTimeInput;
  interviewed_date_not?: DateTimeInput;
  interviewed_date_in?: DateTimeInput[] | DateTimeInput;
  interviewed_date_not_in?: DateTimeInput[] | DateTimeInput;
  interviewed_date_lt?: DateTimeInput;
  interviewed_date_lte?: DateTimeInput;
  interviewed_date_gt?: DateTimeInput;
  interviewed_date_gte?: DateTimeInput;
  status?: String;
  status_not?: String;
  status_in?: String[] | String;
  status_not_in?: String[] | String;
  status_lt?: String;
  status_lte?: String;
  status_gt?: String;
  status_gte?: String;
  status_contains?: String;
  status_not_contains?: String;
  status_starts_with?: String;
  status_not_starts_with?: String;
  status_ends_with?: String;
  status_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?:
    | PersonnelInterviewScalarWhereInput[]
    | PersonnelInterviewScalarWhereInput;
  OR?:
    | PersonnelInterviewScalarWhereInput[]
    | PersonnelInterviewScalarWhereInput;
  NOT?:
    | PersonnelInterviewScalarWhereInput[]
    | PersonnelInterviewScalarWhereInput;
}

export interface PersonnelMetaCreateInput {
  user: UserCreateOneInput;
  driving_licence_id?: String;
  biograhpy?: String;
  experience?: String;
  certification?: String;
  social_security_number?: String;
  documents?: PersonnelDocumentsCreateManyInput;
  photos?: PersonnelPhotosCreateManyInput;
  references?: PersonnelReferencesCreateManyInput;
  interviewed_by?: PersonnelInterviewCreateManyInput;
  is_background_checked?: Boolean;
  is_verified?: Boolean;
  is_consent_checked?: Boolean;
  is_creds_verified?: Boolean;
  is_reference_verified?: Boolean;
}

export interface PersonnelInterviewUpdateDataInput {
  interviewed_by?: UserUpdateOneRequiredInput;
  interviewed_date?: DateTimeInput;
  status?: String;
}

export interface PersonnelDocumentsCreateManyInput {
  create?: PersonnelDocumentsCreateInput[] | PersonnelDocumentsCreateInput;
  connect?:
    | PersonnelDocumentsWhereUniqueInput[]
    | PersonnelDocumentsWhereUniqueInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface PersonnelPhotosCreateManyInput {
  create?: PersonnelPhotosCreateInput[] | PersonnelPhotosCreateInput;
  connect?: PersonnelPhotosWhereUniqueInput[] | PersonnelPhotosWhereUniqueInput;
}

export type PersonnelInterviewWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PersonnelPhotosCreateInput {
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
  is_primary?: Boolean;
}

export interface PersonnelInterviewWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  interviewed_by?: UserWhereInput;
  interviewed_date?: DateTimeInput;
  interviewed_date_not?: DateTimeInput;
  interviewed_date_in?: DateTimeInput[] | DateTimeInput;
  interviewed_date_not_in?: DateTimeInput[] | DateTimeInput;
  interviewed_date_lt?: DateTimeInput;
  interviewed_date_lte?: DateTimeInput;
  interviewed_date_gt?: DateTimeInput;
  interviewed_date_gte?: DateTimeInput;
  status?: String;
  status_not?: String;
  status_in?: String[] | String;
  status_not_in?: String[] | String;
  status_lt?: String;
  status_lte?: String;
  status_gt?: String;
  status_gte?: String;
  status_contains?: String;
  status_not_contains?: String;
  status_starts_with?: String;
  status_not_starts_with?: String;
  status_ends_with?: String;
  status_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PersonnelInterviewWhereInput[] | PersonnelInterviewWhereInput;
  OR?: PersonnelInterviewWhereInput[] | PersonnelInterviewWhereInput;
  NOT?: PersonnelInterviewWhereInput[] | PersonnelInterviewWhereInput;
}

export interface PersonnelReferencesCreateManyInput {
  create?: PersonnelReferencesCreateInput[] | PersonnelReferencesCreateInput;
  connect?:
    | PersonnelReferencesWhereUniqueInput[]
    | PersonnelReferencesWhereUniqueInput;
}

export interface PostUpdateManyMutationInput {
  published?: Boolean;
  title?: String;
  content?: String;
}

export type PersonnelDocumentsWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PersonnelPhotosWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  filename?: String;
  filename_not?: String;
  filename_in?: String[] | String;
  filename_not_in?: String[] | String;
  filename_lt?: String;
  filename_lte?: String;
  filename_gt?: String;
  filename_gte?: String;
  filename_contains?: String;
  filename_not_contains?: String;
  filename_starts_with?: String;
  filename_not_starts_with?: String;
  filename_ends_with?: String;
  filename_not_ends_with?: String;
  mimetype?: String;
  mimetype_not?: String;
  mimetype_in?: String[] | String;
  mimetype_not_in?: String[] | String;
  mimetype_lt?: String;
  mimetype_lte?: String;
  mimetype_gt?: String;
  mimetype_gte?: String;
  mimetype_contains?: String;
  mimetype_not_contains?: String;
  mimetype_starts_with?: String;
  mimetype_not_starts_with?: String;
  mimetype_ends_with?: String;
  mimetype_not_ends_with?: String;
  encoding?: String;
  encoding_not?: String;
  encoding_in?: String[] | String;
  encoding_not_in?: String[] | String;
  encoding_lt?: String;
  encoding_lte?: String;
  encoding_gt?: String;
  encoding_gte?: String;
  encoding_contains?: String;
  encoding_not_contains?: String;
  encoding_starts_with?: String;
  encoding_not_starts_with?: String;
  encoding_ends_with?: String;
  encoding_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  is_primary?: Boolean;
  is_primary_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PersonnelPhotosWhereInput[] | PersonnelPhotosWhereInput;
  OR?: PersonnelPhotosWhereInput[] | PersonnelPhotosWhereInput;
  NOT?: PersonnelPhotosWhereInput[] | PersonnelPhotosWhereInput;
}

export interface PersonnelInterviewCreateManyInput {
  create?: PersonnelInterviewCreateInput[] | PersonnelInterviewCreateInput;
  connect?:
    | PersonnelInterviewWhereUniqueInput[]
    | PersonnelInterviewWhereUniqueInput;
}

export interface CommentUpdateDataInput {
  content?: String;
  is_deleted?: Boolean;
}

export interface PersonnelMetaUpdateInput {
  user?: UserUpdateOneRequiredInput;
  driving_licence_id?: String;
  biograhpy?: String;
  experience?: String;
  certification?: String;
  social_security_number?: String;
  documents?: PersonnelDocumentsUpdateManyInput;
  photos?: PersonnelPhotosUpdateManyInput;
  references?: PersonnelReferencesUpdateManyInput;
  interviewed_by?: PersonnelInterviewUpdateManyInput;
  is_background_checked?: Boolean;
  is_verified?: Boolean;
  is_consent_checked?: Boolean;
  is_creds_verified?: Boolean;
  is_reference_verified?: Boolean;
}

export interface CommentUpdateManyInput {
  create?: CommentCreateInput[] | CommentCreateInput;
  update?:
    | CommentUpdateWithWhereUniqueNestedInput[]
    | CommentUpdateWithWhereUniqueNestedInput;
  upsert?:
    | CommentUpsertWithWhereUniqueNestedInput[]
    | CommentUpsertWithWhereUniqueNestedInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  set?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface PersonnelDocumentsUpdateManyInput {
  create?: PersonnelDocumentsCreateInput[] | PersonnelDocumentsCreateInput;
  update?:
    | PersonnelDocumentsUpdateWithWhereUniqueNestedInput[]
    | PersonnelDocumentsUpdateWithWhereUniqueNestedInput;
  upsert?:
    | PersonnelDocumentsUpsertWithWhereUniqueNestedInput[]
    | PersonnelDocumentsUpsertWithWhereUniqueNestedInput;
  delete?:
    | PersonnelDocumentsWhereUniqueInput[]
    | PersonnelDocumentsWhereUniqueInput;
  connect?:
    | PersonnelDocumentsWhereUniqueInput[]
    | PersonnelDocumentsWhereUniqueInput;
  set?:
    | PersonnelDocumentsWhereUniqueInput[]
    | PersonnelDocumentsWhereUniqueInput;
  disconnect?:
    | PersonnelDocumentsWhereUniqueInput[]
    | PersonnelDocumentsWhereUniqueInput;
  deleteMany?:
    | PersonnelDocumentsScalarWhereInput[]
    | PersonnelDocumentsScalarWhereInput;
  updateMany?:
    | PersonnelDocumentsUpdateManyWithWhereNestedInput[]
    | PersonnelDocumentsUpdateManyWithWhereNestedInput;
}

export interface PostCreateInput {
  published?: Boolean;
  title: String;
  content: String;
  comments?: CommentCreateManyInput;
}

export interface PersonnelDocumentsUpdateWithWhereUniqueNestedInput {
  where: PersonnelDocumentsWhereUniqueInput;
  data: PersonnelDocumentsUpdateDataInput;
}

export interface PersonnelPhotosUpdateManyMutationInput {
  filename?: String;
  mimetype?: String;
  encoding?: String;
  url?: String;
  is_primary?: Boolean;
}

export interface PersonnelDocumentsUpdateDataInput {
  doc_name?: String;
  doc_type?: PersonnelDocumentTypes;
  filename?: String;
  mimetype?: String;
  encoding?: String;
  url?: String;
  is_verified?: Boolean;
}

export interface PersonnelInterviewUpdateManyDataInput {
  interviewed_date?: DateTimeInput;
  status?: String;
}

export interface PersonnelDocumentsUpsertWithWhereUniqueNestedInput {
  where: PersonnelDocumentsWhereUniqueInput;
  update: PersonnelDocumentsUpdateDataInput;
  create: PersonnelDocumentsCreateInput;
}

export interface PersonnelInterviewUpsertWithWhereUniqueNestedInput {
  where: PersonnelInterviewWhereUniqueInput;
  update: PersonnelInterviewUpdateDataInput;
  create: PersonnelInterviewCreateInput;
}

export interface PersonnelDocumentsScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  doc_name?: String;
  doc_name_not?: String;
  doc_name_in?: String[] | String;
  doc_name_not_in?: String[] | String;
  doc_name_lt?: String;
  doc_name_lte?: String;
  doc_name_gt?: String;
  doc_name_gte?: String;
  doc_name_contains?: String;
  doc_name_not_contains?: String;
  doc_name_starts_with?: String;
  doc_name_not_starts_with?: String;
  doc_name_ends_with?: String;
  doc_name_not_ends_with?: String;
  doc_type?: PersonnelDocumentTypes;
  doc_type_not?: PersonnelDocumentTypes;
  doc_type_in?: PersonnelDocumentTypes[] | PersonnelDocumentTypes;
  doc_type_not_in?: PersonnelDocumentTypes[] | PersonnelDocumentTypes;
  filename?: String;
  filename_not?: String;
  filename_in?: String[] | String;
  filename_not_in?: String[] | String;
  filename_lt?: String;
  filename_lte?: String;
  filename_gt?: String;
  filename_gte?: String;
  filename_contains?: String;
  filename_not_contains?: String;
  filename_starts_with?: String;
  filename_not_starts_with?: String;
  filename_ends_with?: String;
  filename_not_ends_with?: String;
  mimetype?: String;
  mimetype_not?: String;
  mimetype_in?: String[] | String;
  mimetype_not_in?: String[] | String;
  mimetype_lt?: String;
  mimetype_lte?: String;
  mimetype_gt?: String;
  mimetype_gte?: String;
  mimetype_contains?: String;
  mimetype_not_contains?: String;
  mimetype_starts_with?: String;
  mimetype_not_starts_with?: String;
  mimetype_ends_with?: String;
  mimetype_not_ends_with?: String;
  encoding?: String;
  encoding_not?: String;
  encoding_in?: String[] | String;
  encoding_not_in?: String[] | String;
  encoding_lt?: String;
  encoding_lte?: String;
  encoding_gt?: String;
  encoding_gte?: String;
  encoding_contains?: String;
  encoding_not_contains?: String;
  encoding_starts_with?: String;
  encoding_not_starts_with?: String;
  encoding_ends_with?: String;
  encoding_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  is_verified?: Boolean;
  is_verified_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?:
    | PersonnelDocumentsScalarWhereInput[]
    | PersonnelDocumentsScalarWhereInput;
  OR?:
    | PersonnelDocumentsScalarWhereInput[]
    | PersonnelDocumentsScalarWhereInput;
  NOT?:
    | PersonnelDocumentsScalarWhereInput[]
    | PersonnelDocumentsScalarWhereInput;
}

export interface PersonnelPhotosSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PersonnelPhotosWhereInput;
  AND?:
    | PersonnelPhotosSubscriptionWhereInput[]
    | PersonnelPhotosSubscriptionWhereInput;
  OR?:
    | PersonnelPhotosSubscriptionWhereInput[]
    | PersonnelPhotosSubscriptionWhereInput;
  NOT?:
    | PersonnelPhotosSubscriptionWhereInput[]
    | PersonnelPhotosSubscriptionWhereInput;
}

export interface PersonnelDocumentsUpdateManyWithWhereNestedInput {
  where: PersonnelDocumentsScalarWhereInput;
  data: PersonnelDocumentsUpdateManyDataInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
  name?: String;
  address?: String;
  city?: String;
  zip?: String;
  phone?: String;
  company?: String;
  date_of_birth?: DateTimeInput;
  type?: UserType;
}

export interface PersonnelDocumentsUpdateManyDataInput {
  doc_name?: String;
  doc_type?: PersonnelDocumentTypes;
  filename?: String;
  mimetype?: String;
  encoding?: String;
  url?: String;
  is_verified?: Boolean;
}

export interface CommentUpsertWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateDataInput;
  create: CommentCreateInput;
}

export interface PersonnelPhotosUpdateManyInput {
  create?: PersonnelPhotosCreateInput[] | PersonnelPhotosCreateInput;
  update?:
    | PersonnelPhotosUpdateWithWhereUniqueNestedInput[]
    | PersonnelPhotosUpdateWithWhereUniqueNestedInput;
  upsert?:
    | PersonnelPhotosUpsertWithWhereUniqueNestedInput[]
    | PersonnelPhotosUpsertWithWhereUniqueNestedInput;
  delete?: PersonnelPhotosWhereUniqueInput[] | PersonnelPhotosWhereUniqueInput;
  connect?: PersonnelPhotosWhereUniqueInput[] | PersonnelPhotosWhereUniqueInput;
  set?: PersonnelPhotosWhereUniqueInput[] | PersonnelPhotosWhereUniqueInput;
  disconnect?:
    | PersonnelPhotosWhereUniqueInput[]
    | PersonnelPhotosWhereUniqueInput;
  deleteMany?:
    | PersonnelPhotosScalarWhereInput[]
    | PersonnelPhotosScalarWhereInput;
  updateMany?:
    | PersonnelPhotosUpdateManyWithWhereNestedInput[]
    | PersonnelPhotosUpdateManyWithWhereNestedInput;
}

export interface CommentCreateManyInput {
  create?: CommentCreateInput[] | CommentCreateInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface PersonnelPhotosUpdateWithWhereUniqueNestedInput {
  where: PersonnelPhotosWhereUniqueInput;
  data: PersonnelPhotosUpdateDataInput;
}

export interface PersonnelMetaUpdateManyMutationInput {
  driving_licence_id?: String;
  biograhpy?: String;
  experience?: String;
  certification?: String;
  social_security_number?: String;
  is_background_checked?: Boolean;
  is_verified?: Boolean;
  is_consent_checked?: Boolean;
  is_creds_verified?: Boolean;
  is_reference_verified?: Boolean;
}

export interface PersonnelPhotosUpdateDataInput {
  filename?: String;
  mimetype?: String;
  encoding?: String;
  url?: String;
  is_primary?: Boolean;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface PersonnelPhotosUpsertWithWhereUniqueNestedInput {
  where: PersonnelPhotosWhereUniqueInput;
  update: PersonnelPhotosUpdateDataInput;
  create: PersonnelPhotosCreateInput;
}

export type PersonnelMetaWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PersonnelReferencesUpdateManyInput {
  create?: PersonnelReferencesCreateInput[] | PersonnelReferencesCreateInput;
  update?:
    | PersonnelReferencesUpdateWithWhereUniqueNestedInput[]
    | PersonnelReferencesUpdateWithWhereUniqueNestedInput;
  upsert?:
    | PersonnelReferencesUpsertWithWhereUniqueNestedInput[]
    | PersonnelReferencesUpsertWithWhereUniqueNestedInput;
  delete?:
    | PersonnelReferencesWhereUniqueInput[]
    | PersonnelReferencesWhereUniqueInput;
  connect?:
    | PersonnelReferencesWhereUniqueInput[]
    | PersonnelReferencesWhereUniqueInput;
  set?:
    | PersonnelReferencesWhereUniqueInput[]
    | PersonnelReferencesWhereUniqueInput;
  disconnect?:
    | PersonnelReferencesWhereUniqueInput[]
    | PersonnelReferencesWhereUniqueInput;
  deleteMany?:
    | PersonnelReferencesScalarWhereInput[]
    | PersonnelReferencesScalarWhereInput;
  updateMany?:
    | PersonnelReferencesUpdateManyWithWhereNestedInput[]
    | PersonnelReferencesUpdateManyWithWhereNestedInput;
}

export interface PersonnelPhotosUpdateManyDataInput {
  filename?: String;
  mimetype?: String;
  encoding?: String;
  url?: String;
  is_primary?: Boolean;
}

export interface PersonnelPhotosUpdateManyWithWhereNestedInput {
  where: PersonnelPhotosScalarWhereInput;
  data: PersonnelPhotosUpdateManyDataInput;
}

export interface PersonnelPhotosScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  filename?: String;
  filename_not?: String;
  filename_in?: String[] | String;
  filename_not_in?: String[] | String;
  filename_lt?: String;
  filename_lte?: String;
  filename_gt?: String;
  filename_gte?: String;
  filename_contains?: String;
  filename_not_contains?: String;
  filename_starts_with?: String;
  filename_not_starts_with?: String;
  filename_ends_with?: String;
  filename_not_ends_with?: String;
  mimetype?: String;
  mimetype_not?: String;
  mimetype_in?: String[] | String;
  mimetype_not_in?: String[] | String;
  mimetype_lt?: String;
  mimetype_lte?: String;
  mimetype_gt?: String;
  mimetype_gte?: String;
  mimetype_contains?: String;
  mimetype_not_contains?: String;
  mimetype_starts_with?: String;
  mimetype_not_starts_with?: String;
  mimetype_ends_with?: String;
  mimetype_not_ends_with?: String;
  encoding?: String;
  encoding_not?: String;
  encoding_in?: String[] | String;
  encoding_not_in?: String[] | String;
  encoding_lt?: String;
  encoding_lte?: String;
  encoding_gt?: String;
  encoding_gte?: String;
  encoding_contains?: String;
  encoding_not_contains?: String;
  encoding_starts_with?: String;
  encoding_not_starts_with?: String;
  encoding_ends_with?: String;
  encoding_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  is_primary?: Boolean;
  is_primary_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PersonnelPhotosScalarWhereInput[] | PersonnelPhotosScalarWhereInput;
  OR?: PersonnelPhotosScalarWhereInput[] | PersonnelPhotosScalarWhereInput;
  NOT?: PersonnelPhotosScalarWhereInput[] | PersonnelPhotosScalarWhereInput;
}

export interface PersonnelMetaWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  driving_licence_id?: String;
  driving_licence_id_not?: String;
  driving_licence_id_in?: String[] | String;
  driving_licence_id_not_in?: String[] | String;
  driving_licence_id_lt?: String;
  driving_licence_id_lte?: String;
  driving_licence_id_gt?: String;
  driving_licence_id_gte?: String;
  driving_licence_id_contains?: String;
  driving_licence_id_not_contains?: String;
  driving_licence_id_starts_with?: String;
  driving_licence_id_not_starts_with?: String;
  driving_licence_id_ends_with?: String;
  driving_licence_id_not_ends_with?: String;
  biograhpy?: String;
  biograhpy_not?: String;
  biograhpy_in?: String[] | String;
  biograhpy_not_in?: String[] | String;
  biograhpy_lt?: String;
  biograhpy_lte?: String;
  biograhpy_gt?: String;
  biograhpy_gte?: String;
  biograhpy_contains?: String;
  biograhpy_not_contains?: String;
  biograhpy_starts_with?: String;
  biograhpy_not_starts_with?: String;
  biograhpy_ends_with?: String;
  biograhpy_not_ends_with?: String;
  experience?: String;
  experience_not?: String;
  experience_in?: String[] | String;
  experience_not_in?: String[] | String;
  experience_lt?: String;
  experience_lte?: String;
  experience_gt?: String;
  experience_gte?: String;
  experience_contains?: String;
  experience_not_contains?: String;
  experience_starts_with?: String;
  experience_not_starts_with?: String;
  experience_ends_with?: String;
  experience_not_ends_with?: String;
  certification?: String;
  certification_not?: String;
  certification_in?: String[] | String;
  certification_not_in?: String[] | String;
  certification_lt?: String;
  certification_lte?: String;
  certification_gt?: String;
  certification_gte?: String;
  certification_contains?: String;
  certification_not_contains?: String;
  certification_starts_with?: String;
  certification_not_starts_with?: String;
  certification_ends_with?: String;
  certification_not_ends_with?: String;
  social_security_number?: String;
  social_security_number_not?: String;
  social_security_number_in?: String[] | String;
  social_security_number_not_in?: String[] | String;
  social_security_number_lt?: String;
  social_security_number_lte?: String;
  social_security_number_gt?: String;
  social_security_number_gte?: String;
  social_security_number_contains?: String;
  social_security_number_not_contains?: String;
  social_security_number_starts_with?: String;
  social_security_number_not_starts_with?: String;
  social_security_number_ends_with?: String;
  social_security_number_not_ends_with?: String;
  documents_every?: PersonnelDocumentsWhereInput;
  documents_some?: PersonnelDocumentsWhereInput;
  documents_none?: PersonnelDocumentsWhereInput;
  photos_every?: PersonnelPhotosWhereInput;
  photos_some?: PersonnelPhotosWhereInput;
  photos_none?: PersonnelPhotosWhereInput;
  references_every?: PersonnelReferencesWhereInput;
  references_some?: PersonnelReferencesWhereInput;
  references_none?: PersonnelReferencesWhereInput;
  interviewed_by_every?: PersonnelInterviewWhereInput;
  interviewed_by_some?: PersonnelInterviewWhereInput;
  interviewed_by_none?: PersonnelInterviewWhereInput;
  is_background_checked?: Boolean;
  is_background_checked_not?: Boolean;
  is_verified?: Boolean;
  is_verified_not?: Boolean;
  is_consent_checked?: Boolean;
  is_consent_checked_not?: Boolean;
  is_creds_verified?: Boolean;
  is_creds_verified_not?: Boolean;
  is_reference_verified?: Boolean;
  is_reference_verified_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PersonnelMetaWhereInput[] | PersonnelMetaWhereInput;
  OR?: PersonnelMetaWhereInput[] | PersonnelMetaWhereInput;
  NOT?: PersonnelMetaWhereInput[] | PersonnelMetaWhereInput;
}

export interface PersonnelDocumentsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PersonnelDocumentsWhereInput;
  AND?:
    | PersonnelDocumentsSubscriptionWhereInput[]
    | PersonnelDocumentsSubscriptionWhereInput;
  OR?:
    | PersonnelDocumentsSubscriptionWhereInput[]
    | PersonnelDocumentsSubscriptionWhereInput;
  NOT?:
    | PersonnelDocumentsSubscriptionWhereInput[]
    | PersonnelDocumentsSubscriptionWhereInput;
}

export interface PersonnelInterviewUpdateManyWithWhereNestedInput {
  where: PersonnelInterviewScalarWhereInput;
  data: PersonnelInterviewUpdateManyDataInput;
}

export interface PersonnelReferencesUpdateInput {
  email?: String;
  name?: String;
  phone?: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name?: String;
  address?: String;
  city?: String;
  zip?: String;
  phone?: String;
  company?: String;
  date_of_birth?: DateTimeOutput;
  type?: UserType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  zip: () => Promise<String>;
  phone: () => Promise<String>;
  company: () => Promise<String>;
  date_of_birth: () => Promise<DateTimeOutput>;
  type: () => Promise<UserType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  company: () => Promise<AsyncIterator<String>>;
  date_of_birth: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<UserType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelInterviewEdge {
  node: PersonnelInterview;
  cursor: String;
}

export interface PersonnelInterviewEdgePromise
  extends Promise<PersonnelInterviewEdge>,
    Fragmentable {
  node: <T = PersonnelInterviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonnelInterviewEdgeSubscription
  extends Promise<AsyncIterator<PersonnelInterviewEdge>>,
    Fragmentable {
  node: <T = PersonnelInterviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PersonnelDocuments {
  id: ID_Output;
  doc_name: String;
  doc_type: PersonnelDocumentTypes;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
  is_verified?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelDocumentsPromise
  extends Promise<PersonnelDocuments>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  doc_name: () => Promise<String>;
  doc_type: () => Promise<PersonnelDocumentTypes>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
  is_verified: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelDocumentsSubscription
  extends Promise<AsyncIterator<PersonnelDocuments>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  doc_name: () => Promise<AsyncIterator<String>>;
  doc_type: () => Promise<AsyncIterator<PersonnelDocumentTypes>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  is_verified: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelInterviewConnection {
  pageInfo: PageInfo;
  edges: PersonnelInterviewEdge[];
}

export interface PersonnelInterviewConnectionPromise
  extends Promise<PersonnelInterviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonnelInterviewEdge>>() => T;
  aggregate: <T = AggregatePersonnelInterviewPromise>() => T;
}

export interface PersonnelInterviewConnectionSubscription
  extends Promise<AsyncIterator<PersonnelInterviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<PersonnelInterviewEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregatePersonnelInterviewSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface Comment {
  id: ID_Output;
  content?: String;
  is_deleted?: Boolean;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  is_deleted: () => Promise<Boolean>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  is_deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface Post {
  id: ID_Output;
  published: Boolean;
  title: String;
  content: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface PersonnelReferencesEdge {
  node: PersonnelReferences;
  cursor: String;
}

export interface PersonnelReferencesEdgePromise
  extends Promise<PersonnelReferencesEdge>,
    Fragmentable {
  node: <T = PersonnelReferencesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonnelReferencesEdgeSubscription
  extends Promise<AsyncIterator<PersonnelReferencesEdge>>,
    Fragmentable {
  node: <T = PersonnelReferencesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentPreviousValues {
  id: ID_Output;
  content?: String;
  is_deleted?: Boolean;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  is_deleted: () => Promise<Boolean>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  is_deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregatePersonnelPhotos {
  count: Int;
}

export interface AggregatePersonnelPhotosPromise
  extends Promise<AggregatePersonnelPhotos>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonnelPhotosSubscription
  extends Promise<AsyncIterator<AggregatePersonnelPhotos>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name?: String;
  address?: String;
  city?: String;
  zip?: String;
  phone?: String;
  company?: String;
  date_of_birth?: DateTimeOutput;
  type?: UserType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  zip: () => Promise<String>;
  phone: () => Promise<String>;
  company: () => Promise<String>;
  date_of_birth: () => Promise<DateTimeOutput>;
  type: () => Promise<UserType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  company: () => Promise<AsyncIterator<String>>;
  date_of_birth: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<UserType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelPhotosConnection {
  pageInfo: PageInfo;
  edges: PersonnelPhotosEdge[];
}

export interface PersonnelPhotosConnectionPromise
  extends Promise<PersonnelPhotosConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonnelPhotosEdge>>() => T;
  aggregate: <T = AggregatePersonnelPhotosPromise>() => T;
}

export interface PersonnelPhotosConnectionSubscription
  extends Promise<AsyncIterator<PersonnelPhotosConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PersonnelPhotosEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePersonnelPhotosSubscription>() => T;
}

export interface PersonnelDocumentsSubscriptionPayload {
  mutation: MutationType;
  node: PersonnelDocuments;
  updatedFields: String[];
  previousValues: PersonnelDocumentsPreviousValues;
}

export interface PersonnelDocumentsSubscriptionPayloadPromise
  extends Promise<PersonnelDocumentsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonnelDocumentsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonnelDocumentsPreviousValuesPromise>() => T;
}

export interface PersonnelDocumentsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonnelDocumentsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonnelDocumentsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonnelDocumentsPreviousValuesSubscription>() => T;
}

export interface PersonnelMetaEdge {
  node: PersonnelMeta;
  cursor: String;
}

export interface PersonnelMetaEdgePromise
  extends Promise<PersonnelMetaEdge>,
    Fragmentable {
  node: <T = PersonnelMetaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonnelMetaEdgeSubscription
  extends Promise<AsyncIterator<PersonnelMetaEdge>>,
    Fragmentable {
  node: <T = PersonnelMetaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PersonnelDocumentsPreviousValues {
  id: ID_Output;
  doc_name: String;
  doc_type: PersonnelDocumentTypes;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
  is_verified?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelDocumentsPreviousValuesPromise
  extends Promise<PersonnelDocumentsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  doc_name: () => Promise<String>;
  doc_type: () => Promise<PersonnelDocumentTypes>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
  is_verified: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelDocumentsPreviousValuesSubscription
  extends Promise<AsyncIterator<PersonnelDocumentsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  doc_name: () => Promise<AsyncIterator<String>>;
  doc_type: () => Promise<AsyncIterator<PersonnelDocumentTypes>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  is_verified: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelReferences {
  id: ID_Output;
  email: String;
  name: String;
  phone: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelReferencesPromise
  extends Promise<PersonnelReferences>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelReferencesSubscription
  extends Promise<AsyncIterator<PersonnelReferences>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelInterview {
  id: ID_Output;
  interviewed_date: DateTimeOutput;
  status: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelInterviewPromise
  extends Promise<PersonnelInterview>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  interviewed_by: <T = UserPromise>() => T;
  interviewed_date: () => Promise<DateTimeOutput>;
  status: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelInterviewSubscription
  extends Promise<AsyncIterator<PersonnelInterview>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  interviewed_by: <T = UserSubscription>() => T;
  interviewed_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelPhotos {
  id: ID_Output;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
  is_primary?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelPhotosPromise
  extends Promise<PersonnelPhotos>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
  is_primary: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelPhotosSubscription
  extends Promise<AsyncIterator<PersonnelPhotos>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  is_primary: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelInterviewSubscriptionPayload {
  mutation: MutationType;
  node: PersonnelInterview;
  updatedFields: String[];
  previousValues: PersonnelInterviewPreviousValues;
}

export interface PersonnelInterviewSubscriptionPayloadPromise
  extends Promise<PersonnelInterviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonnelInterviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonnelInterviewPreviousValuesPromise>() => T;
}

export interface PersonnelInterviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonnelInterviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonnelInterviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonnelInterviewPreviousValuesSubscription>() => T;
}

export interface PersonnelMeta {
  id: ID_Output;
  driving_licence_id?: String;
  biograhpy?: String;
  experience?: String;
  certification?: String;
  social_security_number?: String;
  is_background_checked?: Boolean;
  is_verified?: Boolean;
  is_consent_checked?: Boolean;
  is_creds_verified?: Boolean;
  is_reference_verified?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelMetaPromise
  extends Promise<PersonnelMeta>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  driving_licence_id: () => Promise<String>;
  biograhpy: () => Promise<String>;
  experience: () => Promise<String>;
  certification: () => Promise<String>;
  social_security_number: () => Promise<String>;
  documents: <T = FragmentableArray<PersonnelDocuments>>(
    args?: {
      where?: PersonnelDocumentsWhereInput;
      orderBy?: PersonnelDocumentsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  photos: <T = FragmentableArray<PersonnelPhotos>>(
    args?: {
      where?: PersonnelPhotosWhereInput;
      orderBy?: PersonnelPhotosOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  references: <T = FragmentableArray<PersonnelReferences>>(
    args?: {
      where?: PersonnelReferencesWhereInput;
      orderBy?: PersonnelReferencesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  interviewed_by: <T = FragmentableArray<PersonnelInterview>>(
    args?: {
      where?: PersonnelInterviewWhereInput;
      orderBy?: PersonnelInterviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  is_background_checked: () => Promise<Boolean>;
  is_verified: () => Promise<Boolean>;
  is_consent_checked: () => Promise<Boolean>;
  is_creds_verified: () => Promise<Boolean>;
  is_reference_verified: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelMetaSubscription
  extends Promise<AsyncIterator<PersonnelMeta>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  driving_licence_id: () => Promise<AsyncIterator<String>>;
  biograhpy: () => Promise<AsyncIterator<String>>;
  experience: () => Promise<AsyncIterator<String>>;
  certification: () => Promise<AsyncIterator<String>>;
  social_security_number: () => Promise<AsyncIterator<String>>;
  documents: <T = Promise<AsyncIterator<PersonnelDocumentsSubscription>>>(
    args?: {
      where?: PersonnelDocumentsWhereInput;
      orderBy?: PersonnelDocumentsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  photos: <T = Promise<AsyncIterator<PersonnelPhotosSubscription>>>(
    args?: {
      where?: PersonnelPhotosWhereInput;
      orderBy?: PersonnelPhotosOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  references: <T = Promise<AsyncIterator<PersonnelReferencesSubscription>>>(
    args?: {
      where?: PersonnelReferencesWhereInput;
      orderBy?: PersonnelReferencesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  interviewed_by: <T = Promise<AsyncIterator<PersonnelInterviewSubscription>>>(
    args?: {
      where?: PersonnelInterviewWhereInput;
      orderBy?: PersonnelInterviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  is_background_checked: () => Promise<AsyncIterator<Boolean>>;
  is_verified: () => Promise<AsyncIterator<Boolean>>;
  is_consent_checked: () => Promise<AsyncIterator<Boolean>>;
  is_creds_verified: () => Promise<AsyncIterator<Boolean>>;
  is_reference_verified: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelInterviewPreviousValues {
  id: ID_Output;
  interviewed_date: DateTimeOutput;
  status: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelInterviewPreviousValuesPromise
  extends Promise<PersonnelInterviewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  interviewed_date: () => Promise<DateTimeOutput>;
  status: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelInterviewPreviousValuesSubscription
  extends Promise<AsyncIterator<PersonnelInterviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  interviewed_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface AggregatePersonnelDocuments {
  count: Int;
}

export interface AggregatePersonnelDocumentsPromise
  extends Promise<AggregatePersonnelDocuments>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonnelDocumentsSubscription
  extends Promise<AsyncIterator<AggregatePersonnelDocuments>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PersonnelMetaSubscriptionPayload {
  mutation: MutationType;
  node: PersonnelMeta;
  updatedFields: String[];
  previousValues: PersonnelMetaPreviousValues;
}

export interface PersonnelMetaSubscriptionPayloadPromise
  extends Promise<PersonnelMetaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonnelMetaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonnelMetaPreviousValuesPromise>() => T;
}

export interface PersonnelMetaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonnelMetaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonnelMetaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonnelMetaPreviousValuesSubscription>() => T;
}

export interface PersonnelReferencesConnection {
  pageInfo: PageInfo;
  edges: PersonnelReferencesEdge[];
}

export interface PersonnelReferencesConnectionPromise
  extends Promise<PersonnelReferencesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonnelReferencesEdge>>() => T;
  aggregate: <T = AggregatePersonnelReferencesPromise>() => T;
}

export interface PersonnelReferencesConnectionSubscription
  extends Promise<AsyncIterator<PersonnelReferencesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<PersonnelReferencesEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregatePersonnelReferencesSubscription>() => T;
}

export interface PersonnelMetaPreviousValues {
  id: ID_Output;
  driving_licence_id?: String;
  biograhpy?: String;
  experience?: String;
  certification?: String;
  social_security_number?: String;
  is_background_checked?: Boolean;
  is_verified?: Boolean;
  is_consent_checked?: Boolean;
  is_creds_verified?: Boolean;
  is_reference_verified?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelMetaPreviousValuesPromise
  extends Promise<PersonnelMetaPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  driving_licence_id: () => Promise<String>;
  biograhpy: () => Promise<String>;
  experience: () => Promise<String>;
  certification: () => Promise<String>;
  social_security_number: () => Promise<String>;
  is_background_checked: () => Promise<Boolean>;
  is_verified: () => Promise<Boolean>;
  is_consent_checked: () => Promise<Boolean>;
  is_creds_verified: () => Promise<Boolean>;
  is_reference_verified: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelMetaPreviousValuesSubscription
  extends Promise<AsyncIterator<PersonnelMetaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  driving_licence_id: () => Promise<AsyncIterator<String>>;
  biograhpy: () => Promise<AsyncIterator<String>>;
  experience: () => Promise<AsyncIterator<String>>;
  certification: () => Promise<AsyncIterator<String>>;
  social_security_number: () => Promise<AsyncIterator<String>>;
  is_background_checked: () => Promise<AsyncIterator<Boolean>>;
  is_verified: () => Promise<AsyncIterator<Boolean>>;
  is_consent_checked: () => Promise<AsyncIterator<Boolean>>;
  is_creds_verified: () => Promise<AsyncIterator<Boolean>>;
  is_reference_verified: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregatePersonnelMeta {
  count: Int;
}

export interface AggregatePersonnelMetaPromise
  extends Promise<AggregatePersonnelMeta>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonnelMetaSubscription
  extends Promise<AsyncIterator<AggregatePersonnelMeta>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PersonnelDocumentsEdge {
  node: PersonnelDocuments;
  cursor: String;
}

export interface PersonnelDocumentsEdgePromise
  extends Promise<PersonnelDocumentsEdge>,
    Fragmentable {
  node: <T = PersonnelDocumentsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonnelDocumentsEdgeSubscription
  extends Promise<AsyncIterator<PersonnelDocumentsEdge>>,
    Fragmentable {
  node: <T = PersonnelDocumentsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PostPreviousValues {
  id: ID_Output;
  published: Boolean;
  title: String;
  content: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface PersonnelPhotosSubscriptionPayload {
  mutation: MutationType;
  node: PersonnelPhotos;
  updatedFields: String[];
  previousValues: PersonnelPhotosPreviousValues;
}

export interface PersonnelPhotosSubscriptionPayloadPromise
  extends Promise<PersonnelPhotosSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonnelPhotosPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonnelPhotosPreviousValuesPromise>() => T;
}

export interface PersonnelPhotosSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonnelPhotosSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonnelPhotosSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonnelPhotosPreviousValuesSubscription>() => T;
}

export interface AggregatePersonnelInterview {
  count: Int;
}

export interface AggregatePersonnelInterviewPromise
  extends Promise<AggregatePersonnelInterview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonnelInterviewSubscription
  extends Promise<AsyncIterator<AggregatePersonnelInterview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregatePersonnelReferences {
  count: Int;
}

export interface AggregatePersonnelReferencesPromise
  extends Promise<AggregatePersonnelReferences>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonnelReferencesSubscription
  extends Promise<AsyncIterator<AggregatePersonnelReferences>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PersonnelReferencesPreviousValues {
  id: ID_Output;
  email: String;
  name: String;
  phone: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelReferencesPreviousValuesPromise
  extends Promise<PersonnelReferencesPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelReferencesPreviousValuesSubscription
  extends Promise<AsyncIterator<PersonnelReferencesPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelReferencesSubscriptionPayload {
  mutation: MutationType;
  node: PersonnelReferences;
  updatedFields: String[];
  previousValues: PersonnelReferencesPreviousValues;
}

export interface PersonnelReferencesSubscriptionPayloadPromise
  extends Promise<PersonnelReferencesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonnelReferencesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonnelReferencesPreviousValuesPromise>() => T;
}

export interface PersonnelReferencesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonnelReferencesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonnelReferencesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonnelReferencesPreviousValuesSubscription>() => T;
}

export interface PersonnelDocumentsConnection {
  pageInfo: PageInfo;
  edges: PersonnelDocumentsEdge[];
}

export interface PersonnelDocumentsConnectionPromise
  extends Promise<PersonnelDocumentsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonnelDocumentsEdge>>() => T;
  aggregate: <T = AggregatePersonnelDocumentsPromise>() => T;
}

export interface PersonnelDocumentsConnectionSubscription
  extends Promise<AsyncIterator<PersonnelDocumentsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<PersonnelDocumentsEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregatePersonnelDocumentsSubscription>() => T;
}

export interface PersonnelPhotosPreviousValues {
  id: ID_Output;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
  is_primary?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PersonnelPhotosPreviousValuesPromise
  extends Promise<PersonnelPhotosPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
  is_primary: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PersonnelPhotosPreviousValuesSubscription
  extends Promise<AsyncIterator<PersonnelPhotosPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  is_primary: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonnelPhotosEdge {
  node: PersonnelPhotos;
  cursor: String;
}

export interface PersonnelPhotosEdgePromise
  extends Promise<PersonnelPhotosEdge>,
    Fragmentable {
  node: <T = PersonnelPhotosPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonnelPhotosEdgeSubscription
  extends Promise<AsyncIterator<PersonnelPhotosEdge>>,
    Fragmentable {
  node: <T = PersonnelPhotosSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface PersonnelMetaConnection {
  pageInfo: PageInfo;
  edges: PersonnelMetaEdge[];
}

export interface PersonnelMetaConnectionPromise
  extends Promise<PersonnelMetaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonnelMetaEdge>>() => T;
  aggregate: <T = AggregatePersonnelMetaPromise>() => T;
}

export interface PersonnelMetaConnectionSubscription
  extends Promise<AsyncIterator<PersonnelMetaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PersonnelMetaEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePersonnelMetaSubscription>() => T;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "PersonnelMeta",
    embedded: false
  },
  {
    name: "PersonnelDocuments",
    embedded: false
  },
  {
    name: "PersonnelPhotos",
    embedded: false
  },
  {
    name: "PersonnelReferences",
    embedded: false
  },
  {
    name: "PersonnelInterview",
    embedded: false
  },
  {
    name: "UserType",
    embedded: false
  },
  {
    name: "PersonnelDocumentTypes",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
